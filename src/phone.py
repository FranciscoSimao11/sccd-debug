"""
Generated by Statechart compiler by Glenn De Jonghe, Joeri Exelmans, Simon Van Mierlo, and Yentl Van Tendeloo (for the inspiration)

Model author: Francisco Simoes
Model name:   Phone

"""

from python_sccd.python_sccd_runtime.statecharts_core import *
from sccd.runtime.statecharts_core import *
from python_sccd.python_sccd_runtime.colors import *
import argparse
from sccd.compiler.utils import FileWriter
import os
import inspect
from time import sleep

# package "Phone"

class Phone(RuntimeClassBase):
    def __init__(self, controller):
        RuntimeClassBase.__init__(self, controller)
        
        self.semantics.big_step_maximality = StatechartSemantics.TakeMany
        self.semantics.internal_event_lifeline = StatechartSemantics.Queue
        self.semantics.input_event_lifeline = StatechartSemantics.FirstComboStep
        self.semantics.priority = StatechartSemantics.SourceParent
        self.semantics.concurrency = StatechartSemantics.Single
        
        self.firstTime = True
        self.didCalcs = Queue()
        self.active_states = Queue()
        self.startTime = 0.0
        self.executionTime = 0.0
        self.localExecutionTime = 0.0
        self.cumulativeDebugTime = 0.0
        self.tracedEvents = []
        self.debugging = False
        self.expiredTimestamps = []
        
        # set execution speed
        self.setSimulationSpeed()
        
        # build Statechart structure
        self.build_statechart_structure()
        
        # user defined attributes
        self.battery = 0
        
        # call user defined constructor
        Phone.user_defined_constructor(self)
    
    def user_defined_constructor(self):
        self.min_battery = 10
        self.max_battery = 100
    
    def setSimulationSpeed(self):
        
        parser = argparse.ArgumentParser(prog="python -m sccd.compiler.sccdc")
        parser.add_argument('-s','--simType', help='Simulation type which has 3 different variations: 0 = default simulation, scale factor of 1; 1 = scaled real-time simulation, takes one extra arg to set the scale factor; 2 = as-fast-as-possible simulation, scale factor = infinity', default=0)
        parser.add_argument('-f','--factor', help='Scale factor: default value is 1; if the factor is 2, the simulation 2x faster', default=1)
        args = vars(parser.parse_args())
        
        if args['simType'] is not None:
            args['simType'] = float(args['simType'])
            args['factor'] = float(args['factor'])
            self.scaleFactor = 1.0
            if args['simType'] == 0:
                print(colors.fg.yellow+"Real-time Simulation")
            elif args['simType'] == 1:
                print(colors.fg.yellow+"Scaled Real-time Simulation")
                if args['factor'] is not None and args['factor'] > 0:
                    self.scaleFactor = args['factor']
            elif args['simType'] == 2:
                print(colors.fg.yellow+"As-fast-as-possible Simulation")
                self.scaleFactor = float('inf')
            else:
                print(colors.fg.yellow+"Invalid simulation type. Defaulting to Real-time Simulation")
                self.scaleFactor = 1.0
            print(colors.fg.yellow+"Scale Factor: {}".format(self.scaleFactor)+colors.reset)
    
    def user_defined_destructor(self):
        pass
    
    
    # user defined method
    def charge_battery(self):
        self.battery = self.battery + 1
    
    
    # builds Statechart structure
    def build_statechart_structure(self):
        
        # state <root>
        self.states[""] = State(0, "", self)
        
        # state /powered_off
        self.states["/powered_off"] = State(1, "/powered_off", self)
        self.states["/powered_off"].setEnter(self._powered_off_enter)
        self.states["/powered_off"].setExit(self._powered_off_exit)
        
        # state /powered_off/not_charging
        self.states["/powered_off/not_charging"] = State(2, "/powered_off/not_charging", self)
        self.states["/powered_off/not_charging"].setEnter(self._powered_off_not_charging_enter)
        self.states["/powered_off/not_charging"].setExit(self._powered_off_not_charging_exit)
        
        # state /powered_off/charging
        self.states["/powered_off/charging"] = State(3, "/powered_off/charging", self)
        self.states["/powered_off/charging"].setEnter(self._powered_off_charging_enter)
        self.states["/powered_off/charging"].setExit(self._powered_off_charging_exit)
        
        # state /powered_on
        self.states["/powered_on"] = ParallelState(4, "/powered_on", self)
        self.states["/powered_on"].setEnter(self._powered_on_enter)
        self.states["/powered_on"].setExit(self._powered_on_exit)
        
        # state /powered_on/charge
        self.states["/powered_on/charge"] = State(5, "/powered_on/charge", self)
        self.states["/powered_on/charge"].setEnter(self._powered_on_charge_enter)
        self.states["/powered_on/charge"].setExit(self._powered_on_charge_exit)
        
        # state /powered_on/charge/not_charging
        self.states["/powered_on/charge/not_charging"] = State(6, "/powered_on/charge/not_charging", self)
        self.states["/powered_on/charge/not_charging"].setEnter(self._powered_on_charge_not_charging_enter)
        self.states["/powered_on/charge/not_charging"].setExit(self._powered_on_charge_not_charging_exit)
        
        # state /powered_on/charge/charging
        self.states["/powered_on/charge/charging"] = State(7, "/powered_on/charge/charging", self)
        self.states["/powered_on/charge/charging"].setEnter(self._powered_on_charge_charging_enter)
        self.states["/powered_on/charge/charging"].setExit(self._powered_on_charge_charging_exit)
        
        # state /powered_on/apps
        self.states["/powered_on/apps"] = State(8, "/powered_on/apps", self)
        self.states["/powered_on/apps"].setEnter(self._powered_on_apps_enter)
        self.states["/powered_on/apps"].setExit(self._powered_on_apps_exit)
        
        # state /powered_on/apps/homescreen
        self.states["/powered_on/apps/homescreen"] = State(9, "/powered_on/apps/homescreen", self)
        self.states["/powered_on/apps/homescreen"].setEnter(self._powered_on_apps_homescreen_enter)
        self.states["/powered_on/apps/homescreen"].setExit(self._powered_on_apps_homescreen_exit)
        
        # state /powered_on/apps/app_a
        self.states["/powered_on/apps/app_a"] = State(10, "/powered_on/apps/app_a", self)
        self.states["/powered_on/apps/app_a"].setEnter(self._powered_on_apps_app_a_enter)
        self.states["/powered_on/apps/app_a"].setExit(self._powered_on_apps_app_a_exit)
        
        # state /powered_on/apps/app_b
        self.states["/powered_on/apps/app_b"] = State(11, "/powered_on/apps/app_b", self)
        self.states["/powered_on/apps/app_b"].setEnter(self._powered_on_apps_app_b_enter)
        self.states["/powered_on/apps/app_b"].setExit(self._powered_on_apps_app_b_exit)
        
        # state /state_Debug
        self.states["/state_Debug"] = State(12, "/state_Debug", self)
        self.states["/state_Debug"].setEnter(self._state_Debug_enter)
        self.states["/state_Debug"].setExit(self._state_Debug_exit)
        
        # state /state_Final
        self.states["/state_Final"] = State(13, "/state_Final", self)
        self.states["/state_Final"].setEnter(self._state_Final_enter)
        
        # state /state_Help
        self.states["/state_Help"] = State(14, "/state_Help", self)
        self.states["/state_Help"].setEnter(self._state_Help_enter)
        self.states["/state_Help"].setExit(self._state_Help_exit)
        
        # debug events
        pauseEvent = Event("pause", self.getInPortName("input"))
        stopEvent = Event("stop", self.getInPortName("input"))
        continueEvent = Event("continue", self.getInPortName("input"))
        helpEvent = Event("help", self.getInPortName("input"))
        
        # debug transitions
        self.pauseTransitions = {}
        self.timedTransitions = {}
        self.eventTransitions = {}
        self.createdTransitions = {}
        self.stopTransitions = {}
        self.helpTransitions = {}
        self.timeBreakpointTransitions = {}
        self.genBreakpointTransitions = {}
        
        # add children
        self.states[""].addChild(self.states["/powered_off"])
        self.states[""].addChild(self.states["/powered_on"])
        self.states["/powered_off"].addChild(self.states["/powered_off/not_charging"])
        self.states["/powered_off"].addChild(self.states["/powered_off/charging"])
        self.states["/powered_on"].addChild(self.states["/powered_on/charge"])
        self.states["/powered_on"].addChild(self.states["/powered_on/apps"])
        self.states["/powered_on/charge"].addChild(self.states["/powered_on/charge/not_charging"])
        self.states["/powered_on/charge"].addChild(self.states["/powered_on/charge/charging"])
        self.states["/powered_on/apps"].addChild(self.states["/powered_on/apps/homescreen"])
        self.states["/powered_on/apps"].addChild(self.states["/powered_on/apps/app_a"])
        self.states["/powered_on/apps"].addChild(self.states["/powered_on/apps/app_b"])
        self.states[""].addChild(self.states["/state_Debug"])
        self.states[""].addChild(self.states["/state_Final"])
        self.states[""].addChild(self.states["/state_Help"])
        self.states[""].fixTree()
        self.states[""].default_state = self.states["/powered_off"]
        self.states["/powered_off"].default_state = self.states["/powered_off/not_charging"]
        self.states["/powered_on/charge"].default_state = self.states["/powered_on/charge/not_charging"]
        self.states["/powered_on/apps"].default_state = self.states["/powered_on/apps/homescreen"]
        
        # transition /powered_off/not_charging
        self.eventTransitions["/powered_off/not_charging"] = []
        self.timedTransitions["/powered_off/not_charging"] = []
        self.createdTransitions["/powered_off/not_charging"] = []
        self.timeBreakpointTransitions["/powered_off/not_charging"] = []
        self.genBreakpointTransitions["/powered_off/not_charging"] = []
        _powered_off_not_charging_0 = Transition(self, self.states["/powered_off/not_charging"], [self.states["/powered_on"]])
        _powered_off_not_charging_0.setTrigger(Event("press_power_button", self.getInPortName("input")))
        _powered_off_not_charging_0.setGuard(self._powered_off_not_charging_0_guard)
        self.states["/powered_off/not_charging"].addTransition(_powered_off_not_charging_0)
        self.eventTransitions["/powered_off/not_charging"].append(_powered_off_not_charging_0)
        _powered_off_not_charging_1 = Transition(self, self.states["/powered_off/not_charging"], [self.states["/powered_off/charging"]])
        _powered_off_not_charging_1.setTrigger(Event("plug_charger", self.getInPortName("input")))
        self.states["/powered_off/not_charging"].addTransition(_powered_off_not_charging_1)
        self.eventTransitions["/powered_off/not_charging"].append(_powered_off_not_charging_1)
        
        # transition /powered_off/charging
        self.eventTransitions["/powered_off/charging"] = []
        self.timedTransitions["/powered_off/charging"] = []
        self.createdTransitions["/powered_off/charging"] = []
        self.timeBreakpointTransitions["/powered_off/charging"] = []
        self.genBreakpointTransitions["/powered_off/charging"] = []
        _powered_off_charging_0 = Transition(self, self.states["/powered_off/charging"], [self.states["/powered_on"]])
        _powered_off_charging_0.setTrigger(Event("press_power_button", self.getInPortName("input")))
        _powered_off_charging_0.setGuard(self._powered_off_charging_0_guard)
        self.states["/powered_off/charging"].addTransition(_powered_off_charging_0)
        self.eventTransitions["/powered_off/charging"].append(_powered_off_charging_0)
        _powered_off_charging_1 = Transition(self, self.states["/powered_off/charging"], [self.states["/powered_off/not_charging"]])
        _powered_off_charging_1.setTrigger(Event("unplug_charger", self.getInPortName("input")))
        self.states["/powered_off/charging"].addTransition(_powered_off_charging_1)
        self.eventTransitions["/powered_off/charging"].append(_powered_off_charging_1)
        _powered_off_charging_2 = Transition(self, self.states["/powered_off/charging"], [self.states["/powered_off/charging"]])
        _powered_off_charging_2.setTrigger(Event("_0after"))
        _powered_off_charging_2.setGuard(self._powered_off_charging_2_guard)
        self.states["/powered_off/charging"].addTransition(_powered_off_charging_2)
        self.timedTransitions["/powered_off/charging"].append(_powered_off_charging_2)
        
        # transition /powered_on/charge/not_charging
        self.eventTransitions["/powered_on/charge/not_charging"] = []
        self.timedTransitions["/powered_on/charge/not_charging"] = []
        self.createdTransitions["/powered_on/charge/not_charging"] = []
        self.timeBreakpointTransitions["/powered_on/charge/not_charging"] = []
        self.genBreakpointTransitions["/powered_on/charge/not_charging"] = []
        _powered_on_charge_not_charging_0 = Transition(self, self.states["/powered_on/charge/not_charging"], [self.states["/powered_on/charge/charging"]])
        _powered_on_charge_not_charging_0.setTrigger(Event("plug_charger", self.getInPortName("input")))
        self.states["/powered_on/charge/not_charging"].addTransition(_powered_on_charge_not_charging_0)
        self.eventTransitions["/powered_on/charge/not_charging"].append(_powered_on_charge_not_charging_0)
        
        # transition /powered_on/charge/charging
        self.eventTransitions["/powered_on/charge/charging"] = []
        self.timedTransitions["/powered_on/charge/charging"] = []
        self.createdTransitions["/powered_on/charge/charging"] = []
        self.timeBreakpointTransitions["/powered_on/charge/charging"] = []
        self.genBreakpointTransitions["/powered_on/charge/charging"] = []
        _powered_on_charge_charging_0 = Transition(self, self.states["/powered_on/charge/charging"], [self.states["/powered_on/charge/not_charging"]])
        _powered_on_charge_charging_0.setTrigger(Event("unplug_charger", self.getInPortName("input")))
        self.states["/powered_on/charge/charging"].addTransition(_powered_on_charge_charging_0)
        self.eventTransitions["/powered_on/charge/charging"].append(_powered_on_charge_charging_0)
        _powered_on_charge_charging_1 = Transition(self, self.states["/powered_on/charge/charging"], [self.states["/powered_on/charge/charging"]])
        _powered_on_charge_charging_1.setTrigger(Event("_1after"))
        _powered_on_charge_charging_1.setGuard(self._powered_on_charge_charging_1_guard)
        self.states["/powered_on/charge/charging"].addTransition(_powered_on_charge_charging_1)
        self.timedTransitions["/powered_on/charge/charging"].append(_powered_on_charge_charging_1)
        
        # transition /powered_on/apps/homescreen
        self.eventTransitions["/powered_on/apps/homescreen"] = []
        self.timedTransitions["/powered_on/apps/homescreen"] = []
        self.createdTransitions["/powered_on/apps/homescreen"] = []
        self.timeBreakpointTransitions["/powered_on/apps/homescreen"] = []
        self.genBreakpointTransitions["/powered_on/apps/homescreen"] = []
        _powered_on_apps_homescreen_0 = Transition(self, self.states["/powered_on/apps/homescreen"], [self.states["/powered_on/apps/app_a"]])
        _powered_on_apps_homescreen_0.setTrigger(Event("go_app_a", self.getInPortName("input")))
        self.states["/powered_on/apps/homescreen"].addTransition(_powered_on_apps_homescreen_0)
        self.eventTransitions["/powered_on/apps/homescreen"].append(_powered_on_apps_homescreen_0)
        _powered_on_apps_homescreen_1 = Transition(self, self.states["/powered_on/apps/homescreen"], [self.states["/powered_on/apps/app_b"]])
        _powered_on_apps_homescreen_1.setTrigger(Event("go_app_b", self.getInPortName("input")))
        self.states["/powered_on/apps/homescreen"].addTransition(_powered_on_apps_homescreen_1)
        self.eventTransitions["/powered_on/apps/homescreen"].append(_powered_on_apps_homescreen_1)
        
        # transition /powered_on/apps/app_a
        self.eventTransitions["/powered_on/apps/app_a"] = []
        self.timedTransitions["/powered_on/apps/app_a"] = []
        self.createdTransitions["/powered_on/apps/app_a"] = []
        self.timeBreakpointTransitions["/powered_on/apps/app_a"] = []
        self.genBreakpointTransitions["/powered_on/apps/app_a"] = []
        _powered_on_apps_app_a_0 = Transition(self, self.states["/powered_on/apps/app_a"], [self.states["/powered_on/apps/homescreen"]])
        _powered_on_apps_app_a_0.setTrigger(Event("go_home", self.getInPortName("input")))
        self.states["/powered_on/apps/app_a"].addTransition(_powered_on_apps_app_a_0)
        self.eventTransitions["/powered_on/apps/app_a"].append(_powered_on_apps_app_a_0)
        
        # transition /powered_on/apps/app_b
        self.eventTransitions["/powered_on/apps/app_b"] = []
        self.timedTransitions["/powered_on/apps/app_b"] = []
        self.createdTransitions["/powered_on/apps/app_b"] = []
        self.timeBreakpointTransitions["/powered_on/apps/app_b"] = []
        self.genBreakpointTransitions["/powered_on/apps/app_b"] = []
        _powered_on_apps_app_b_0 = Transition(self, self.states["/powered_on/apps/app_b"], [self.states["/powered_on/apps/homescreen"]])
        _powered_on_apps_app_b_0.setTrigger(Event("go_home", self.getInPortName("input")))
        self.states["/powered_on/apps/app_b"].addTransition(_powered_on_apps_app_b_0)
        self.eventTransitions["/powered_on/apps/app_b"].append(_powered_on_apps_app_b_0)
        
        # transition /powered_off
        self.eventTransitions["/powered_off"] = []
        self.timedTransitions["/powered_off"] = []
        self.createdTransitions["/powered_off"] = []
        self.timeBreakpointTransitions["/powered_off"] = []
        self.genBreakpointTransitions["/powered_off"] = []
        
        # transition /powered_on
        self.eventTransitions["/powered_on"] = []
        self.timedTransitions["/powered_on"] = []
        self.createdTransitions["/powered_on"] = []
        self.timeBreakpointTransitions["/powered_on"] = []
        self.genBreakpointTransitions["/powered_on"] = []
        _powered_on_0 = Transition(self, self.states["/powered_on"], [self.states["/powered_off"]])
        _powered_on_0.setTrigger(Event("press_power_button", self.getInPortName("input")))
        self.states["/powered_on"].addTransition(_powered_on_0)
        self.eventTransitions["/powered_on"].append(_powered_on_0)
        
        # transition /powered_on/charge
        self.eventTransitions["/powered_on/charge"] = []
        self.timedTransitions["/powered_on/charge"] = []
        self.createdTransitions["/powered_on/charge"] = []
        self.timeBreakpointTransitions["/powered_on/charge"] = []
        self.genBreakpointTransitions["/powered_on/charge"] = []
        
        # transition /powered_on/apps
        self.eventTransitions["/powered_on/apps"] = []
        self.timedTransitions["/powered_on/apps"] = []
        self.createdTransitions["/powered_on/apps"] = []
        self.timeBreakpointTransitions["/powered_on/apps"] = []
        self.genBreakpointTransitions["/powered_on/apps"] = []
        
        # transitions /state_Debug
        # /state_Debug to /state_Help
        state_Debug_to_state_Help = Transition(self, self.states["/state_Debug"], [self.states["/state_Help"]])
        state_Debug_to_state_Help.setTrigger(helpEvent)
        self.states["/state_Debug"].addTransition(state_Debug_to_state_Help)
        
        # /state_Help to /state_Debug
        state_Help_to_state_Debug = Transition(self, self.states["/state_Help"], [self.states["/state_Debug"]])
        state_Help_to_state_Debug.setTrigger(Event("_2after"))
        state_Help_to_state_Debug.setGuard(self.continueGuard_state_Debug)
        self.states["/state_Help"].addTransition(state_Help_to_state_Debug)
        
        # /state_Debug to /state_Final
        state_Debug_to_state_Final = Transition(self, self.states["/state_Debug"], [self.states["/state_Final"]])
        state_Debug_to_state_Final.setTrigger(Event("stop"))
        self.states["/state_Debug"].addTransition(state_Debug_to_state_Final)
        self.debugToFinal = state_Debug_to_state_Final
        
        # _powered_off to /state_Debug
        _powered_off_to_state_Debug = Transition(self, self.states["/powered_off"], [self.states["/state_Debug"]])
        _powered_off_to_state_Debug.setTrigger(pauseEvent)
        self.states["/powered_off"].addTransition(_powered_off_to_state_Debug)
        self.pauseTransitions["/powered_off"] = _powered_off_to_state_Debug
        
        # powered_off from /state_Debug
        _state_Debug_to_powered_off = Transition(self, self.states["/state_Debug"], [self.states["/powered_off"]])
        _state_Debug_to_powered_off.setTrigger(continueEvent)
        _state_Debug_to_powered_off.setGuard(self.continueGuard_powered_off)
        self.states["/state_Debug"].addTransition(_state_Debug_to_powered_off)
        
        # _powered_off to /state_Help
        _powered_off_to_state_Help = Transition(self, self.states["/powered_off"], [self.states["/state_Help"]])
        _powered_off_to_state_Help.setTrigger(helpEvent)
        self.states["/powered_off"].addTransition(_powered_off_to_state_Help)
        self.helpTransitions["/powered_off"] = _powered_off_to_state_Help
        
        # powered_off from /state_Help
        _state_Help_to_powered_off = Transition(self, self.states["/state_Help"], [self.states["/powered_off"]])
        _state_Help_to_powered_off.setTrigger(Event("_2after"))
        _state_Help_to_powered_off.setGuard(self.continueGuard_powered_off)
        self.states["/state_Help"].addTransition(_state_Help_to_powered_off)
        
        # _powered_off to /state_Final
        _powered_off_to_state_Final = Transition(self, self.states["/powered_off"], [self.states["/state_Final"]])
        _powered_off_to_state_Final.setTrigger(stopEvent)
        self.states["/powered_off"].addTransition(_powered_off_to_state_Final)
        self.stopTransitions["/powered_off"] = _powered_off_to_state_Final
        
        # _powered_off_not_charging to /state_Debug
        _powered_off_not_charging_to_state_Debug = Transition(self, self.states["/powered_off/not_charging"], [self.states["/state_Debug"]])
        _powered_off_not_charging_to_state_Debug.setTrigger(pauseEvent)
        self.states["/powered_off/not_charging"].addTransition(_powered_off_not_charging_to_state_Debug)
        self.pauseTransitions["/powered_off/not_charging"] = _powered_off_not_charging_to_state_Debug
        
        # powered_off_not_charging from /state_Debug
        _state_Debug_to_powered_off_not_charging = Transition(self, self.states["/state_Debug"], [self.states["/powered_off/not_charging"]])
        _state_Debug_to_powered_off_not_charging.setTrigger(continueEvent)
        _state_Debug_to_powered_off_not_charging.setGuard(self.continueGuard_powered_off_not_charging)
        self.states["/state_Debug"].addTransition(_state_Debug_to_powered_off_not_charging)
        
        # _powered_off_not_charging to /state_Help
        _powered_off_not_charging_to_state_Help = Transition(self, self.states["/powered_off/not_charging"], [self.states["/state_Help"]])
        _powered_off_not_charging_to_state_Help.setTrigger(helpEvent)
        self.states["/powered_off/not_charging"].addTransition(_powered_off_not_charging_to_state_Help)
        self.helpTransitions["/powered_off/not_charging"] = _powered_off_not_charging_to_state_Help
        
        # powered_off_not_charging from /state_Help
        _state_Help_to_powered_off_not_charging = Transition(self, self.states["/state_Help"], [self.states["/powered_off/not_charging"]])
        _state_Help_to_powered_off_not_charging.setTrigger(Event("_2after"))
        _state_Help_to_powered_off_not_charging.setGuard(self.continueGuard_powered_off_not_charging)
        self.states["/state_Help"].addTransition(_state_Help_to_powered_off_not_charging)
        
        # _powered_off_not_charging to /state_Final
        _powered_off_not_charging_to_state_Final = Transition(self, self.states["/powered_off/not_charging"], [self.states["/state_Final"]])
        _powered_off_not_charging_to_state_Final.setTrigger(stopEvent)
        self.states["/powered_off/not_charging"].addTransition(_powered_off_not_charging_to_state_Final)
        self.stopTransitions["/powered_off/not_charging"] = _powered_off_not_charging_to_state_Final
        
        # _powered_off_charging to /state_Debug
        _powered_off_charging_to_state_Debug = Transition(self, self.states["/powered_off/charging"], [self.states["/state_Debug"]])
        _powered_off_charging_to_state_Debug.setTrigger(pauseEvent)
        self.states["/powered_off/charging"].addTransition(_powered_off_charging_to_state_Debug)
        self.pauseTransitions["/powered_off/charging"] = _powered_off_charging_to_state_Debug
        
        # powered_off_charging from /state_Debug
        _state_Debug_to_powered_off_charging = Transition(self, self.states["/state_Debug"], [self.states["/powered_off/charging"]])
        _state_Debug_to_powered_off_charging.setTrigger(continueEvent)
        _state_Debug_to_powered_off_charging.setGuard(self.continueGuard_powered_off_charging)
        self.states["/state_Debug"].addTransition(_state_Debug_to_powered_off_charging)
        
        # _powered_off_charging to /state_Help
        _powered_off_charging_to_state_Help = Transition(self, self.states["/powered_off/charging"], [self.states["/state_Help"]])
        _powered_off_charging_to_state_Help.setTrigger(helpEvent)
        self.states["/powered_off/charging"].addTransition(_powered_off_charging_to_state_Help)
        self.helpTransitions["/powered_off/charging"] = _powered_off_charging_to_state_Help
        
        # powered_off_charging from /state_Help
        _state_Help_to_powered_off_charging = Transition(self, self.states["/state_Help"], [self.states["/powered_off/charging"]])
        _state_Help_to_powered_off_charging.setTrigger(Event("_2after"))
        _state_Help_to_powered_off_charging.setGuard(self.continueGuard_powered_off_charging)
        self.states["/state_Help"].addTransition(_state_Help_to_powered_off_charging)
        
        # _powered_off_charging to /state_Final
        _powered_off_charging_to_state_Final = Transition(self, self.states["/powered_off/charging"], [self.states["/state_Final"]])
        _powered_off_charging_to_state_Final.setTrigger(stopEvent)
        self.states["/powered_off/charging"].addTransition(_powered_off_charging_to_state_Final)
        self.stopTransitions["/powered_off/charging"] = _powered_off_charging_to_state_Final
        
        # _powered_on to /state_Debug
        _powered_on_to_state_Debug = Transition(self, self.states["/powered_on"], [self.states["/state_Debug"]])
        _powered_on_to_state_Debug.setTrigger(pauseEvent)
        self.states["/powered_on"].addTransition(_powered_on_to_state_Debug)
        self.pauseTransitions["/powered_on"] = _powered_on_to_state_Debug
        
        # powered_on from /state_Debug
        _state_Debug_to_powered_on = Transition(self, self.states["/state_Debug"], [self.states["/powered_on"]])
        _state_Debug_to_powered_on.setTrigger(continueEvent)
        _state_Debug_to_powered_on.setGuard(self.continueGuard_powered_on)
        self.states["/state_Debug"].addTransition(_state_Debug_to_powered_on)
        
        # _powered_on to /state_Help
        _powered_on_to_state_Help = Transition(self, self.states["/powered_on"], [self.states["/state_Help"]])
        _powered_on_to_state_Help.setTrigger(helpEvent)
        self.states["/powered_on"].addTransition(_powered_on_to_state_Help)
        self.helpTransitions["/powered_on"] = _powered_on_to_state_Help
        
        # powered_on from /state_Help
        _state_Help_to_powered_on = Transition(self, self.states["/state_Help"], [self.states["/powered_on"]])
        _state_Help_to_powered_on.setTrigger(Event("_2after"))
        _state_Help_to_powered_on.setGuard(self.continueGuard_powered_on)
        self.states["/state_Help"].addTransition(_state_Help_to_powered_on)
        
        # _powered_on to /state_Final
        _powered_on_to_state_Final = Transition(self, self.states["/powered_on"], [self.states["/state_Final"]])
        _powered_on_to_state_Final.setTrigger(stopEvent)
        self.states["/powered_on"].addTransition(_powered_on_to_state_Final)
        self.stopTransitions["/powered_on"] = _powered_on_to_state_Final
        
        # _powered_on_charge to /state_Debug
        _powered_on_charge_to_state_Debug = Transition(self, self.states["/powered_on/charge"], [self.states["/state_Debug"]])
        _powered_on_charge_to_state_Debug.setTrigger(pauseEvent)
        self.states["/powered_on/charge"].addTransition(_powered_on_charge_to_state_Debug)
        self.pauseTransitions["/powered_on/charge"] = _powered_on_charge_to_state_Debug
        
        # powered_on_charge from /state_Debug
        _state_Debug_to_powered_on_charge = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge"]])
        _state_Debug_to_powered_on_charge.setTrigger(continueEvent)
        _state_Debug_to_powered_on_charge.setGuard(self.continueGuard_powered_on_charge)
        self.states["/state_Debug"].addTransition(_state_Debug_to_powered_on_charge)
        
        # _powered_on_charge to /state_Help
        _powered_on_charge_to_state_Help = Transition(self, self.states["/powered_on/charge"], [self.states["/state_Help"]])
        _powered_on_charge_to_state_Help.setTrigger(helpEvent)
        self.states["/powered_on/charge"].addTransition(_powered_on_charge_to_state_Help)
        self.helpTransitions["/powered_on/charge"] = _powered_on_charge_to_state_Help
        
        # powered_on_charge from /state_Help
        _state_Help_to_powered_on_charge = Transition(self, self.states["/state_Help"], [self.states["/powered_on/charge"]])
        _state_Help_to_powered_on_charge.setTrigger(Event("_2after"))
        _state_Help_to_powered_on_charge.setGuard(self.continueGuard_powered_on_charge)
        self.states["/state_Help"].addTransition(_state_Help_to_powered_on_charge)
        
        # _powered_on_charge to /state_Final
        _powered_on_charge_to_state_Final = Transition(self, self.states["/powered_on/charge"], [self.states["/state_Final"]])
        _powered_on_charge_to_state_Final.setTrigger(stopEvent)
        self.states["/powered_on/charge"].addTransition(_powered_on_charge_to_state_Final)
        self.stopTransitions["/powered_on/charge"] = _powered_on_charge_to_state_Final
        
        # _powered_on_charge_not_charging to /state_Debug
        _powered_on_charge_not_charging_to_state_Debug = Transition(self, self.states["/powered_on/charge/not_charging"], [self.states["/state_Debug"]])
        _powered_on_charge_not_charging_to_state_Debug.setTrigger(pauseEvent)
        self.states["/powered_on/charge/not_charging"].addTransition(_powered_on_charge_not_charging_to_state_Debug)
        self.pauseTransitions["/powered_on/charge/not_charging"] = _powered_on_charge_not_charging_to_state_Debug
        
        # powered_on_charge_not_charging from /state_Debug
        _state_Debug_to_powered_on_charge_not_charging = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"]])
        _state_Debug_to_powered_on_charge_not_charging.setTrigger(continueEvent)
        _state_Debug_to_powered_on_charge_not_charging.setGuard(self.continueGuard_powered_on_charge_not_charging)
        self.states["/state_Debug"].addTransition(_state_Debug_to_powered_on_charge_not_charging)
        
        # _powered_on_charge_not_charging to /state_Help
        _powered_on_charge_not_charging_to_state_Help = Transition(self, self.states["/powered_on/charge/not_charging"], [self.states["/state_Help"]])
        _powered_on_charge_not_charging_to_state_Help.setTrigger(helpEvent)
        self.states["/powered_on/charge/not_charging"].addTransition(_powered_on_charge_not_charging_to_state_Help)
        self.helpTransitions["/powered_on/charge/not_charging"] = _powered_on_charge_not_charging_to_state_Help
        
        # powered_on_charge_not_charging from /state_Help
        _state_Help_to_powered_on_charge_not_charging = Transition(self, self.states["/state_Help"], [self.states["/powered_on/charge/not_charging"]])
        _state_Help_to_powered_on_charge_not_charging.setTrigger(Event("_2after"))
        _state_Help_to_powered_on_charge_not_charging.setGuard(self.continueGuard_powered_on_charge_not_charging)
        self.states["/state_Help"].addTransition(_state_Help_to_powered_on_charge_not_charging)
        
        # _powered_on_charge_not_charging to /state_Final
        _powered_on_charge_not_charging_to_state_Final = Transition(self, self.states["/powered_on/charge/not_charging"], [self.states["/state_Final"]])
        _powered_on_charge_not_charging_to_state_Final.setTrigger(stopEvent)
        self.states["/powered_on/charge/not_charging"].addTransition(_powered_on_charge_not_charging_to_state_Final)
        self.stopTransitions["/powered_on/charge/not_charging"] = _powered_on_charge_not_charging_to_state_Final
        
        # _powered_on_charge_charging to /state_Debug
        _powered_on_charge_charging_to_state_Debug = Transition(self, self.states["/powered_on/charge/charging"], [self.states["/state_Debug"]])
        _powered_on_charge_charging_to_state_Debug.setTrigger(pauseEvent)
        self.states["/powered_on/charge/charging"].addTransition(_powered_on_charge_charging_to_state_Debug)
        self.pauseTransitions["/powered_on/charge/charging"] = _powered_on_charge_charging_to_state_Debug
        
        # powered_on_charge_charging from /state_Debug
        _state_Debug_to_powered_on_charge_charging = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"]])
        _state_Debug_to_powered_on_charge_charging.setTrigger(continueEvent)
        _state_Debug_to_powered_on_charge_charging.setGuard(self.continueGuard_powered_on_charge_charging)
        self.states["/state_Debug"].addTransition(_state_Debug_to_powered_on_charge_charging)
        
        # _powered_on_charge_charging to /state_Help
        _powered_on_charge_charging_to_state_Help = Transition(self, self.states["/powered_on/charge/charging"], [self.states["/state_Help"]])
        _powered_on_charge_charging_to_state_Help.setTrigger(helpEvent)
        self.states["/powered_on/charge/charging"].addTransition(_powered_on_charge_charging_to_state_Help)
        self.helpTransitions["/powered_on/charge/charging"] = _powered_on_charge_charging_to_state_Help
        
        # powered_on_charge_charging from /state_Help
        _state_Help_to_powered_on_charge_charging = Transition(self, self.states["/state_Help"], [self.states["/powered_on/charge/charging"]])
        _state_Help_to_powered_on_charge_charging.setTrigger(Event("_2after"))
        _state_Help_to_powered_on_charge_charging.setGuard(self.continueGuard_powered_on_charge_charging)
        self.states["/state_Help"].addTransition(_state_Help_to_powered_on_charge_charging)
        
        # _powered_on_charge_charging to /state_Final
        _powered_on_charge_charging_to_state_Final = Transition(self, self.states["/powered_on/charge/charging"], [self.states["/state_Final"]])
        _powered_on_charge_charging_to_state_Final.setTrigger(stopEvent)
        self.states["/powered_on/charge/charging"].addTransition(_powered_on_charge_charging_to_state_Final)
        self.stopTransitions["/powered_on/charge/charging"] = _powered_on_charge_charging_to_state_Final
        
        # _powered_on_apps to /state_Debug
        _powered_on_apps_to_state_Debug = Transition(self, self.states["/powered_on/apps"], [self.states["/state_Debug"]])
        _powered_on_apps_to_state_Debug.setTrigger(pauseEvent)
        self.states["/powered_on/apps"].addTransition(_powered_on_apps_to_state_Debug)
        self.pauseTransitions["/powered_on/apps"] = _powered_on_apps_to_state_Debug
        
        # powered_on_apps from /state_Debug
        _state_Debug_to_powered_on_apps = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps"]])
        _state_Debug_to_powered_on_apps.setTrigger(continueEvent)
        _state_Debug_to_powered_on_apps.setGuard(self.continueGuard_powered_on_apps)
        self.states["/state_Debug"].addTransition(_state_Debug_to_powered_on_apps)
        
        # _powered_on_apps to /state_Help
        _powered_on_apps_to_state_Help = Transition(self, self.states["/powered_on/apps"], [self.states["/state_Help"]])
        _powered_on_apps_to_state_Help.setTrigger(helpEvent)
        self.states["/powered_on/apps"].addTransition(_powered_on_apps_to_state_Help)
        self.helpTransitions["/powered_on/apps"] = _powered_on_apps_to_state_Help
        
        # powered_on_apps from /state_Help
        _state_Help_to_powered_on_apps = Transition(self, self.states["/state_Help"], [self.states["/powered_on/apps"]])
        _state_Help_to_powered_on_apps.setTrigger(Event("_2after"))
        _state_Help_to_powered_on_apps.setGuard(self.continueGuard_powered_on_apps)
        self.states["/state_Help"].addTransition(_state_Help_to_powered_on_apps)
        
        # _powered_on_apps to /state_Final
        _powered_on_apps_to_state_Final = Transition(self, self.states["/powered_on/apps"], [self.states["/state_Final"]])
        _powered_on_apps_to_state_Final.setTrigger(stopEvent)
        self.states["/powered_on/apps"].addTransition(_powered_on_apps_to_state_Final)
        self.stopTransitions["/powered_on/apps"] = _powered_on_apps_to_state_Final
        
        # _powered_on_apps_homescreen to /state_Debug
        _powered_on_apps_homescreen_to_state_Debug = Transition(self, self.states["/powered_on/apps/homescreen"], [self.states["/state_Debug"]])
        _powered_on_apps_homescreen_to_state_Debug.setTrigger(pauseEvent)
        self.states["/powered_on/apps/homescreen"].addTransition(_powered_on_apps_homescreen_to_state_Debug)
        self.pauseTransitions["/powered_on/apps/homescreen"] = _powered_on_apps_homescreen_to_state_Debug
        
        # powered_on_apps_homescreen from /state_Debug
        _state_Debug_to_powered_on_apps_homescreen = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"]])
        _state_Debug_to_powered_on_apps_homescreen.setTrigger(continueEvent)
        _state_Debug_to_powered_on_apps_homescreen.setGuard(self.continueGuard_powered_on_apps_homescreen)
        self.states["/state_Debug"].addTransition(_state_Debug_to_powered_on_apps_homescreen)
        
        # _powered_on_apps_homescreen to /state_Help
        _powered_on_apps_homescreen_to_state_Help = Transition(self, self.states["/powered_on/apps/homescreen"], [self.states["/state_Help"]])
        _powered_on_apps_homescreen_to_state_Help.setTrigger(helpEvent)
        self.states["/powered_on/apps/homescreen"].addTransition(_powered_on_apps_homescreen_to_state_Help)
        self.helpTransitions["/powered_on/apps/homescreen"] = _powered_on_apps_homescreen_to_state_Help
        
        # powered_on_apps_homescreen from /state_Help
        _state_Help_to_powered_on_apps_homescreen = Transition(self, self.states["/state_Help"], [self.states["/powered_on/apps/homescreen"]])
        _state_Help_to_powered_on_apps_homescreen.setTrigger(Event("_2after"))
        _state_Help_to_powered_on_apps_homescreen.setGuard(self.continueGuard_powered_on_apps_homescreen)
        self.states["/state_Help"].addTransition(_state_Help_to_powered_on_apps_homescreen)
        
        # _powered_on_apps_homescreen to /state_Final
        _powered_on_apps_homescreen_to_state_Final = Transition(self, self.states["/powered_on/apps/homescreen"], [self.states["/state_Final"]])
        _powered_on_apps_homescreen_to_state_Final.setTrigger(stopEvent)
        self.states["/powered_on/apps/homescreen"].addTransition(_powered_on_apps_homescreen_to_state_Final)
        self.stopTransitions["/powered_on/apps/homescreen"] = _powered_on_apps_homescreen_to_state_Final
        
        # _powered_on_apps_app_a to /state_Debug
        _powered_on_apps_app_a_to_state_Debug = Transition(self, self.states["/powered_on/apps/app_a"], [self.states["/state_Debug"]])
        _powered_on_apps_app_a_to_state_Debug.setTrigger(pauseEvent)
        self.states["/powered_on/apps/app_a"].addTransition(_powered_on_apps_app_a_to_state_Debug)
        self.pauseTransitions["/powered_on/apps/app_a"] = _powered_on_apps_app_a_to_state_Debug
        
        # powered_on_apps_app_a from /state_Debug
        _state_Debug_to_powered_on_apps_app_a = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/app_a"]])
        _state_Debug_to_powered_on_apps_app_a.setTrigger(continueEvent)
        _state_Debug_to_powered_on_apps_app_a.setGuard(self.continueGuard_powered_on_apps_app_a)
        self.states["/state_Debug"].addTransition(_state_Debug_to_powered_on_apps_app_a)
        
        # _powered_on_apps_app_a to /state_Help
        _powered_on_apps_app_a_to_state_Help = Transition(self, self.states["/powered_on/apps/app_a"], [self.states["/state_Help"]])
        _powered_on_apps_app_a_to_state_Help.setTrigger(helpEvent)
        self.states["/powered_on/apps/app_a"].addTransition(_powered_on_apps_app_a_to_state_Help)
        self.helpTransitions["/powered_on/apps/app_a"] = _powered_on_apps_app_a_to_state_Help
        
        # powered_on_apps_app_a from /state_Help
        _state_Help_to_powered_on_apps_app_a = Transition(self, self.states["/state_Help"], [self.states["/powered_on/apps/app_a"]])
        _state_Help_to_powered_on_apps_app_a.setTrigger(Event("_2after"))
        _state_Help_to_powered_on_apps_app_a.setGuard(self.continueGuard_powered_on_apps_app_a)
        self.states["/state_Help"].addTransition(_state_Help_to_powered_on_apps_app_a)
        
        # _powered_on_apps_app_a to /state_Final
        _powered_on_apps_app_a_to_state_Final = Transition(self, self.states["/powered_on/apps/app_a"], [self.states["/state_Final"]])
        _powered_on_apps_app_a_to_state_Final.setTrigger(stopEvent)
        self.states["/powered_on/apps/app_a"].addTransition(_powered_on_apps_app_a_to_state_Final)
        self.stopTransitions["/powered_on/apps/app_a"] = _powered_on_apps_app_a_to_state_Final
        
        # _powered_on_apps_app_b to /state_Debug
        _powered_on_apps_app_b_to_state_Debug = Transition(self, self.states["/powered_on/apps/app_b"], [self.states["/state_Debug"]])
        _powered_on_apps_app_b_to_state_Debug.setTrigger(pauseEvent)
        self.states["/powered_on/apps/app_b"].addTransition(_powered_on_apps_app_b_to_state_Debug)
        self.pauseTransitions["/powered_on/apps/app_b"] = _powered_on_apps_app_b_to_state_Debug
        
        # powered_on_apps_app_b from /state_Debug
        _state_Debug_to_powered_on_apps_app_b = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_powered_on_apps_app_b.setTrigger(continueEvent)
        _state_Debug_to_powered_on_apps_app_b.setGuard(self.continueGuard_powered_on_apps_app_b)
        self.states["/state_Debug"].addTransition(_state_Debug_to_powered_on_apps_app_b)
        
        # _powered_on_apps_app_b to /state_Help
        _powered_on_apps_app_b_to_state_Help = Transition(self, self.states["/powered_on/apps/app_b"], [self.states["/state_Help"]])
        _powered_on_apps_app_b_to_state_Help.setTrigger(helpEvent)
        self.states["/powered_on/apps/app_b"].addTransition(_powered_on_apps_app_b_to_state_Help)
        self.helpTransitions["/powered_on/apps/app_b"] = _powered_on_apps_app_b_to_state_Help
        
        # powered_on_apps_app_b from /state_Help
        _state_Help_to_powered_on_apps_app_b = Transition(self, self.states["/state_Help"], [self.states["/powered_on/apps/app_b"]])
        _state_Help_to_powered_on_apps_app_b.setTrigger(Event("_2after"))
        _state_Help_to_powered_on_apps_app_b.setGuard(self.continueGuard_powered_on_apps_app_b)
        self.states["/state_Help"].addTransition(_state_Help_to_powered_on_apps_app_b)
        
        # _powered_on_apps_app_b to /state_Final
        _powered_on_apps_app_b_to_state_Final = Transition(self, self.states["/powered_on/apps/app_b"], [self.states["/state_Final"]])
        _powered_on_apps_app_b_to_state_Final.setTrigger(stopEvent)
        self.states["/powered_on/apps/app_b"].addTransition(_powered_on_apps_app_b_to_state_Final)
        self.stopTransitions["/powered_on/apps/app_b"] = _powered_on_apps_app_b_to_state_Final
        
        # comb0
        _state_Debug_to_comb0 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"]])
        _state_Debug_to_comb0.setTrigger(continueEvent)
        _state_Debug_to_comb0.setGuard(self.continueGuardComb0)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb0)
        
        # comb1
        _state_Debug_to_comb1 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"]])
        _state_Debug_to_comb1.setTrigger(continueEvent)
        _state_Debug_to_comb1.setGuard(self.continueGuardComb1)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb1)
        
        # comb2
        _state_Debug_to_comb2 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"]])
        _state_Debug_to_comb2.setTrigger(continueEvent)
        _state_Debug_to_comb2.setGuard(self.continueGuardComb2)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb2)
        
        # comb3
        _state_Debug_to_comb3 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb3.setTrigger(continueEvent)
        _state_Debug_to_comb3.setGuard(self.continueGuardComb3)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb3)
        
        # comb4
        _state_Debug_to_comb4 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb4.setTrigger(continueEvent)
        _state_Debug_to_comb4.setGuard(self.continueGuardComb4)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb4)
        
        # comb5
        _state_Debug_to_comb5 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb5.setTrigger(continueEvent)
        _state_Debug_to_comb5.setGuard(self.continueGuardComb5)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb5)
        
        # comb6
        _state_Debug_to_comb6 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"]])
        _state_Debug_to_comb6.setTrigger(continueEvent)
        _state_Debug_to_comb6.setGuard(self.continueGuardComb6)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb6)
        
        # comb7
        _state_Debug_to_comb7 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"]])
        _state_Debug_to_comb7.setTrigger(continueEvent)
        _state_Debug_to_comb7.setGuard(self.continueGuardComb7)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb7)
        
        # comb8
        _state_Debug_to_comb8 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb8.setTrigger(continueEvent)
        _state_Debug_to_comb8.setGuard(self.continueGuardComb8)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb8)
        
        # comb9
        _state_Debug_to_comb9 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb9.setTrigger(continueEvent)
        _state_Debug_to_comb9.setGuard(self.continueGuardComb9)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb9)
        
        # comb10
        _state_Debug_to_comb10 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb10.setTrigger(continueEvent)
        _state_Debug_to_comb10.setGuard(self.continueGuardComb10)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb10)
        
        # comb11
        _state_Debug_to_comb11 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"]])
        _state_Debug_to_comb11.setTrigger(continueEvent)
        _state_Debug_to_comb11.setGuard(self.continueGuardComb11)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb11)
        
        # comb12
        _state_Debug_to_comb12 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb12.setTrigger(continueEvent)
        _state_Debug_to_comb12.setGuard(self.continueGuardComb12)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb12)
        
        # comb13
        _state_Debug_to_comb13 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb13.setTrigger(continueEvent)
        _state_Debug_to_comb13.setGuard(self.continueGuardComb13)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb13)
        
        # comb14
        _state_Debug_to_comb14 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb14.setTrigger(continueEvent)
        _state_Debug_to_comb14.setGuard(self.continueGuardComb14)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb14)
        
        # comb15
        _state_Debug_to_comb15 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb15.setTrigger(continueEvent)
        _state_Debug_to_comb15.setGuard(self.continueGuardComb15)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb15)
        
        # comb16
        _state_Debug_to_comb16 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb16.setTrigger(continueEvent)
        _state_Debug_to_comb16.setGuard(self.continueGuardComb16)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb16)
        
        # comb17
        _state_Debug_to_comb17 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb17.setTrigger(continueEvent)
        _state_Debug_to_comb17.setGuard(self.continueGuardComb17)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb17)
        
        # comb18
        _state_Debug_to_comb18 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb18.setTrigger(continueEvent)
        _state_Debug_to_comb18.setGuard(self.continueGuardComb18)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb18)
        
        # comb19
        _state_Debug_to_comb19 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb19.setTrigger(continueEvent)
        _state_Debug_to_comb19.setGuard(self.continueGuardComb19)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb19)
        
        # comb20
        _state_Debug_to_comb20 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb20.setTrigger(continueEvent)
        _state_Debug_to_comb20.setGuard(self.continueGuardComb20)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb20)
        
        # comb21
        _state_Debug_to_comb21 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"]])
        _state_Debug_to_comb21.setTrigger(continueEvent)
        _state_Debug_to_comb21.setGuard(self.continueGuardComb21)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb21)
        
        # comb22
        _state_Debug_to_comb22 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"]])
        _state_Debug_to_comb22.setTrigger(continueEvent)
        _state_Debug_to_comb22.setGuard(self.continueGuardComb22)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb22)
        
        # comb23
        _state_Debug_to_comb23 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb23.setTrigger(continueEvent)
        _state_Debug_to_comb23.setGuard(self.continueGuardComb23)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb23)
        
        # comb24
        _state_Debug_to_comb24 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb24.setTrigger(continueEvent)
        _state_Debug_to_comb24.setGuard(self.continueGuardComb24)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb24)
        
        # comb25
        _state_Debug_to_comb25 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb25.setTrigger(continueEvent)
        _state_Debug_to_comb25.setGuard(self.continueGuardComb25)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb25)
        
        # comb26
        _state_Debug_to_comb26 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"]])
        _state_Debug_to_comb26.setTrigger(continueEvent)
        _state_Debug_to_comb26.setGuard(self.continueGuardComb26)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb26)
        
        # comb27
        _state_Debug_to_comb27 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb27.setTrigger(continueEvent)
        _state_Debug_to_comb27.setGuard(self.continueGuardComb27)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb27)
        
        # comb28
        _state_Debug_to_comb28 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb28.setTrigger(continueEvent)
        _state_Debug_to_comb28.setGuard(self.continueGuardComb28)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb28)
        
        # comb29
        _state_Debug_to_comb29 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb29.setTrigger(continueEvent)
        _state_Debug_to_comb29.setGuard(self.continueGuardComb29)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb29)
        
        # comb30
        _state_Debug_to_comb30 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb30.setTrigger(continueEvent)
        _state_Debug_to_comb30.setGuard(self.continueGuardComb30)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb30)
        
        # comb31
        _state_Debug_to_comb31 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb31.setTrigger(continueEvent)
        _state_Debug_to_comb31.setGuard(self.continueGuardComb31)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb31)
        
        # comb32
        _state_Debug_to_comb32 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb32.setTrigger(continueEvent)
        _state_Debug_to_comb32.setGuard(self.continueGuardComb32)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb32)
        
        # comb33
        _state_Debug_to_comb33 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb33.setTrigger(continueEvent)
        _state_Debug_to_comb33.setGuard(self.continueGuardComb33)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb33)
        
        # comb34
        _state_Debug_to_comb34 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb34.setTrigger(continueEvent)
        _state_Debug_to_comb34.setGuard(self.continueGuardComb34)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb34)
        
        # comb35
        _state_Debug_to_comb35 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb35.setTrigger(continueEvent)
        _state_Debug_to_comb35.setGuard(self.continueGuardComb35)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb35)
        
        # comb36
        _state_Debug_to_comb36 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"]])
        _state_Debug_to_comb36.setTrigger(continueEvent)
        _state_Debug_to_comb36.setGuard(self.continueGuardComb36)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb36)
        
        # comb37
        _state_Debug_to_comb37 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb37.setTrigger(continueEvent)
        _state_Debug_to_comb37.setGuard(self.continueGuardComb37)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb37)
        
        # comb38
        _state_Debug_to_comb38 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb38.setTrigger(continueEvent)
        _state_Debug_to_comb38.setGuard(self.continueGuardComb38)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb38)
        
        # comb39
        _state_Debug_to_comb39 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb39.setTrigger(continueEvent)
        _state_Debug_to_comb39.setGuard(self.continueGuardComb39)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb39)
        
        # comb40
        _state_Debug_to_comb40 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb40.setTrigger(continueEvent)
        _state_Debug_to_comb40.setGuard(self.continueGuardComb40)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb40)
        
        # comb41
        _state_Debug_to_comb41 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb41.setTrigger(continueEvent)
        _state_Debug_to_comb41.setGuard(self.continueGuardComb41)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb41)
        
        # comb42
        _state_Debug_to_comb42 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb42.setTrigger(continueEvent)
        _state_Debug_to_comb42.setGuard(self.continueGuardComb42)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb42)
        
        # comb43
        _state_Debug_to_comb43 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb43.setTrigger(continueEvent)
        _state_Debug_to_comb43.setGuard(self.continueGuardComb43)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb43)
        
        # comb44
        _state_Debug_to_comb44 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb44.setTrigger(continueEvent)
        _state_Debug_to_comb44.setGuard(self.continueGuardComb44)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb44)
        
        # comb45
        _state_Debug_to_comb45 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb45.setTrigger(continueEvent)
        _state_Debug_to_comb45.setGuard(self.continueGuardComb45)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb45)
        
        # comb46
        _state_Debug_to_comb46 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb46.setTrigger(continueEvent)
        _state_Debug_to_comb46.setGuard(self.continueGuardComb46)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb46)
        
        # comb47
        _state_Debug_to_comb47 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb47.setTrigger(continueEvent)
        _state_Debug_to_comb47.setGuard(self.continueGuardComb47)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb47)
        
        # comb48
        _state_Debug_to_comb48 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb48.setTrigger(continueEvent)
        _state_Debug_to_comb48.setGuard(self.continueGuardComb48)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb48)
        
        # comb49
        _state_Debug_to_comb49 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb49.setTrigger(continueEvent)
        _state_Debug_to_comb49.setGuard(self.continueGuardComb49)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb49)
        
        # comb50
        _state_Debug_to_comb50 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb50.setTrigger(continueEvent)
        _state_Debug_to_comb50.setGuard(self.continueGuardComb50)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb50)
        
        # comb51
        _state_Debug_to_comb51 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb51.setTrigger(continueEvent)
        _state_Debug_to_comb51.setGuard(self.continueGuardComb51)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb51)
        
        # comb52
        _state_Debug_to_comb52 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb52.setTrigger(continueEvent)
        _state_Debug_to_comb52.setGuard(self.continueGuardComb52)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb52)
        
        # comb53
        _state_Debug_to_comb53 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb53.setTrigger(continueEvent)
        _state_Debug_to_comb53.setGuard(self.continueGuardComb53)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb53)
        
        # comb54
        _state_Debug_to_comb54 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb54.setTrigger(continueEvent)
        _state_Debug_to_comb54.setGuard(self.continueGuardComb54)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb54)
        
        # comb55
        _state_Debug_to_comb55 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb55.setTrigger(continueEvent)
        _state_Debug_to_comb55.setGuard(self.continueGuardComb55)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb55)
        
        # comb56
        _state_Debug_to_comb56 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"]])
        _state_Debug_to_comb56.setTrigger(continueEvent)
        _state_Debug_to_comb56.setGuard(self.continueGuardComb56)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb56)
        
        # comb57
        _state_Debug_to_comb57 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb57.setTrigger(continueEvent)
        _state_Debug_to_comb57.setGuard(self.continueGuardComb57)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb57)
        
        # comb58
        _state_Debug_to_comb58 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb58.setTrigger(continueEvent)
        _state_Debug_to_comb58.setGuard(self.continueGuardComb58)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb58)
        
        # comb59
        _state_Debug_to_comb59 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb59.setTrigger(continueEvent)
        _state_Debug_to_comb59.setGuard(self.continueGuardComb59)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb59)
        
        # comb60
        _state_Debug_to_comb60 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb60.setTrigger(continueEvent)
        _state_Debug_to_comb60.setGuard(self.continueGuardComb60)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb60)
        
        # comb61
        _state_Debug_to_comb61 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb61.setTrigger(continueEvent)
        _state_Debug_to_comb61.setGuard(self.continueGuardComb61)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb61)
        
        # comb62
        _state_Debug_to_comb62 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb62.setTrigger(continueEvent)
        _state_Debug_to_comb62.setGuard(self.continueGuardComb62)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb62)
        
        # comb63
        _state_Debug_to_comb63 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb63.setTrigger(continueEvent)
        _state_Debug_to_comb63.setGuard(self.continueGuardComb63)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb63)
        
        # comb64
        _state_Debug_to_comb64 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb64.setTrigger(continueEvent)
        _state_Debug_to_comb64.setGuard(self.continueGuardComb64)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb64)
        
        # comb65
        _state_Debug_to_comb65 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb65.setTrigger(continueEvent)
        _state_Debug_to_comb65.setGuard(self.continueGuardComb65)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb65)
        
        # comb66
        _state_Debug_to_comb66 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb66.setTrigger(continueEvent)
        _state_Debug_to_comb66.setGuard(self.continueGuardComb66)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb66)
        
        # comb67
        _state_Debug_to_comb67 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb67.setTrigger(continueEvent)
        _state_Debug_to_comb67.setGuard(self.continueGuardComb67)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb67)
        
        # comb68
        _state_Debug_to_comb68 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb68.setTrigger(continueEvent)
        _state_Debug_to_comb68.setGuard(self.continueGuardComb68)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb68)
        
        # comb69
        _state_Debug_to_comb69 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb69.setTrigger(continueEvent)
        _state_Debug_to_comb69.setGuard(self.continueGuardComb69)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb69)
        
        # comb70
        _state_Debug_to_comb70 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb70.setTrigger(continueEvent)
        _state_Debug_to_comb70.setGuard(self.continueGuardComb70)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb70)
        
        # comb71
        _state_Debug_to_comb71 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb71.setTrigger(continueEvent)
        _state_Debug_to_comb71.setGuard(self.continueGuardComb71)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb71)
        
        # comb72
        _state_Debug_to_comb72 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb72.setTrigger(continueEvent)
        _state_Debug_to_comb72.setGuard(self.continueGuardComb72)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb72)
        
        # comb73
        _state_Debug_to_comb73 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb73.setTrigger(continueEvent)
        _state_Debug_to_comb73.setGuard(self.continueGuardComb73)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb73)
        
        # comb74
        _state_Debug_to_comb74 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb74.setTrigger(continueEvent)
        _state_Debug_to_comb74.setGuard(self.continueGuardComb74)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb74)
        
        # comb75
        _state_Debug_to_comb75 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb75.setTrigger(continueEvent)
        _state_Debug_to_comb75.setGuard(self.continueGuardComb75)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb75)
        
        # comb76
        _state_Debug_to_comb76 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb76.setTrigger(continueEvent)
        _state_Debug_to_comb76.setGuard(self.continueGuardComb76)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb76)
        
        # comb77
        _state_Debug_to_comb77 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb77.setTrigger(continueEvent)
        _state_Debug_to_comb77.setGuard(self.continueGuardComb77)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb77)
        
        # comb78
        _state_Debug_to_comb78 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb78.setTrigger(continueEvent)
        _state_Debug_to_comb78.setGuard(self.continueGuardComb78)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb78)
        
        # comb79
        _state_Debug_to_comb79 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb79.setTrigger(continueEvent)
        _state_Debug_to_comb79.setGuard(self.continueGuardComb79)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb79)
        
        # comb80
        _state_Debug_to_comb80 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb80.setTrigger(continueEvent)
        _state_Debug_to_comb80.setGuard(self.continueGuardComb80)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb80)
        
        # comb81
        _state_Debug_to_comb81 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb81.setTrigger(continueEvent)
        _state_Debug_to_comb81.setGuard(self.continueGuardComb81)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb81)
        
        # comb82
        _state_Debug_to_comb82 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb82.setTrigger(continueEvent)
        _state_Debug_to_comb82.setGuard(self.continueGuardComb82)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb82)
        
        # comb83
        _state_Debug_to_comb83 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb83.setTrigger(continueEvent)
        _state_Debug_to_comb83.setGuard(self.continueGuardComb83)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb83)
        
        # comb84
        _state_Debug_to_comb84 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb84.setTrigger(continueEvent)
        _state_Debug_to_comb84.setGuard(self.continueGuardComb84)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb84)
        
        # comb85
        _state_Debug_to_comb85 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb85.setTrigger(continueEvent)
        _state_Debug_to_comb85.setGuard(self.continueGuardComb85)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb85)
        
        # comb86
        _state_Debug_to_comb86 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb86.setTrigger(continueEvent)
        _state_Debug_to_comb86.setGuard(self.continueGuardComb86)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb86)
        
        # comb87
        _state_Debug_to_comb87 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb87.setTrigger(continueEvent)
        _state_Debug_to_comb87.setGuard(self.continueGuardComb87)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb87)
        
        # comb88
        _state_Debug_to_comb88 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb88.setTrigger(continueEvent)
        _state_Debug_to_comb88.setGuard(self.continueGuardComb88)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb88)
        
        # comb89
        _state_Debug_to_comb89 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb89.setTrigger(continueEvent)
        _state_Debug_to_comb89.setGuard(self.continueGuardComb89)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb89)
        
        # comb90
        _state_Debug_to_comb90 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb90.setTrigger(continueEvent)
        _state_Debug_to_comb90.setGuard(self.continueGuardComb90)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb90)
        
        # comb91
        _state_Debug_to_comb91 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
        _state_Debug_to_comb91.setTrigger(continueEvent)
        _state_Debug_to_comb91.setGuard(self.continueGuardComb91)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb91)
        
        # comb92
        _state_Debug_to_comb92 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb92.setTrigger(continueEvent)
        _state_Debug_to_comb92.setGuard(self.continueGuardComb92)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb92)
        
        # comb93
        _state_Debug_to_comb93 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb93.setTrigger(continueEvent)
        _state_Debug_to_comb93.setGuard(self.continueGuardComb93)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb93)
        
        # comb94
        _state_Debug_to_comb94 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb94.setTrigger(continueEvent)
        _state_Debug_to_comb94.setGuard(self.continueGuardComb94)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb94)
        
        # comb95
        _state_Debug_to_comb95 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb95.setTrigger(continueEvent)
        _state_Debug_to_comb95.setGuard(self.continueGuardComb95)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb95)
        
        # comb96
        _state_Debug_to_comb96 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb96.setTrigger(continueEvent)
        _state_Debug_to_comb96.setGuard(self.continueGuardComb96)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb96)
        
        # comb97
        _state_Debug_to_comb97 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb97.setTrigger(continueEvent)
        _state_Debug_to_comb97.setGuard(self.continueGuardComb97)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb97)
        
        # comb98
        _state_Debug_to_comb98 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb98.setTrigger(continueEvent)
        _state_Debug_to_comb98.setGuard(self.continueGuardComb98)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb98)
        
        # comb99
        _state_Debug_to_comb99 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb99.setTrigger(continueEvent)
        _state_Debug_to_comb99.setGuard(self.continueGuardComb99)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb99)
        
        # comb100
        _state_Debug_to_comb100 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb100.setTrigger(continueEvent)
        _state_Debug_to_comb100.setGuard(self.continueGuardComb100)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb100)
        
        # comb101
        _state_Debug_to_comb101 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb101.setTrigger(continueEvent)
        _state_Debug_to_comb101.setGuard(self.continueGuardComb101)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb101)
        
        # comb102
        _state_Debug_to_comb102 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb102.setTrigger(continueEvent)
        _state_Debug_to_comb102.setGuard(self.continueGuardComb102)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb102)
        
        # comb103
        _state_Debug_to_comb103 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb103.setTrigger(continueEvent)
        _state_Debug_to_comb103.setGuard(self.continueGuardComb103)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb103)
        
        # comb104
        _state_Debug_to_comb104 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb104.setTrigger(continueEvent)
        _state_Debug_to_comb104.setGuard(self.continueGuardComb104)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb104)
        
        # comb105
        _state_Debug_to_comb105 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb105.setTrigger(continueEvent)
        _state_Debug_to_comb105.setGuard(self.continueGuardComb105)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb105)
        
        # comb106
        _state_Debug_to_comb106 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb106.setTrigger(continueEvent)
        _state_Debug_to_comb106.setGuard(self.continueGuardComb106)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb106)
        
        # comb107
        _state_Debug_to_comb107 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb107.setTrigger(continueEvent)
        _state_Debug_to_comb107.setGuard(self.continueGuardComb107)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb107)
        
        # comb108
        _state_Debug_to_comb108 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb108.setTrigger(continueEvent)
        _state_Debug_to_comb108.setGuard(self.continueGuardComb108)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb108)
        
        # comb109
        _state_Debug_to_comb109 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb109.setTrigger(continueEvent)
        _state_Debug_to_comb109.setGuard(self.continueGuardComb109)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb109)
        
        # comb110
        _state_Debug_to_comb110 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb110.setTrigger(continueEvent)
        _state_Debug_to_comb110.setGuard(self.continueGuardComb110)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb110)
        
        # comb111
        _state_Debug_to_comb111 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb111.setTrigger(continueEvent)
        _state_Debug_to_comb111.setGuard(self.continueGuardComb111)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb111)
        
        # comb112
        _state_Debug_to_comb112 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
        _state_Debug_to_comb112.setTrigger(continueEvent)
        _state_Debug_to_comb112.setGuard(self.continueGuardComb112)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb112)
        
        # comb113
        _state_Debug_to_comb113 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb113.setTrigger(continueEvent)
        _state_Debug_to_comb113.setGuard(self.continueGuardComb113)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb113)
        
        # comb114
        _state_Debug_to_comb114 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb114.setTrigger(continueEvent)
        _state_Debug_to_comb114.setGuard(self.continueGuardComb114)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb114)
        
        # comb115
        _state_Debug_to_comb115 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb115.setTrigger(continueEvent)
        _state_Debug_to_comb115.setGuard(self.continueGuardComb115)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb115)
        
        # comb116
        _state_Debug_to_comb116 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb116.setTrigger(continueEvent)
        _state_Debug_to_comb116.setGuard(self.continueGuardComb116)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb116)
        
        # comb117
        _state_Debug_to_comb117 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb117.setTrigger(continueEvent)
        _state_Debug_to_comb117.setGuard(self.continueGuardComb117)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb117)
        
        # comb118
        _state_Debug_to_comb118 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb118.setTrigger(continueEvent)
        _state_Debug_to_comb118.setGuard(self.continueGuardComb118)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb118)
        
        # comb119
        _state_Debug_to_comb119 = Transition(self, self.states["/state_Debug"], [self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
        _state_Debug_to_comb119.setTrigger(continueEvent)
        _state_Debug_to_comb119.setGuard(self.continueGuardComb119)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb119)
        
    
    def _powered_off_enter(self):
        self.current_state = self.states["/powered_off"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            
            self.print_internal_state("/powered_off")
            event = "entry: /powered_off"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
        else:
            event = "re-entry: /powered_off"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_off_exit(self):
        index = 3
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        found = False
        for b in self.timeBreakpointTransitions["/powered_off"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/powered_off"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/powered_off"].enabled_event == None) and (not found)) and (self.helpTransitions["/powered_off"].enabled_event == None):
            self.firstTime = True
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/powered_off"])
        allTransitions.extend(self.eventTransitions["/powered_off"])
        allTransitions.extend(self.timeBreakpointTransitions["/powered_off"])
        allTransitions.extend(self.genBreakpointTransitions["/powered_off"])
        allTransitions.extend(self.createdTransitions["/powered_off"])
        allTransitions.append(self.stopTransitions["/powered_off"])
        allTransitions.append(self.pauseTransitions["/powered_off"])
        allTransitions.append(self.helpTransitions["/powered_off"])
        event = "exit: /powered_off"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["battery", self.battery])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_on_enter(self):
        self.current_state = self.states["/powered_on"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            
            self.print_internal_state("/powered_on")
            event = "entry: /powered_on"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/powered_on")
            
        else:
            event = "re-entry: /powered_on"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_on_exit(self):
        index = 3
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        found = False
        for b in self.timeBreakpointTransitions["/powered_on"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/powered_on"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/powered_on"].enabled_event == None) and (not found)) and (self.helpTransitions["/powered_on"].enabled_event == None):
            self.firstTime = True
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/powered_on"])
        allTransitions.extend(self.eventTransitions["/powered_on"])
        allTransitions.extend(self.timeBreakpointTransitions["/powered_on"])
        allTransitions.extend(self.genBreakpointTransitions["/powered_on"])
        allTransitions.extend(self.createdTransitions["/powered_on"])
        allTransitions.append(self.stopTransitions["/powered_on"])
        allTransitions.append(self.pauseTransitions["/powered_on"])
        allTransitions.append(self.helpTransitions["/powered_on"])
        event = "exit: /powered_on"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["battery", self.battery])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_on_charge_enter(self):
        self.current_state = self.states["/powered_on/charge"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            
            self.print_internal_state("/powered_on/charge")
            event = "entry: /powered_on/charge"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
        else:
            event = "re-entry: /powered_on/charge"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_on_charge_exit(self):
        index = 3
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        found = False
        for b in self.timeBreakpointTransitions["/powered_on/charge"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/powered_on/charge"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/powered_on/charge"].enabled_event == None) and (not found)) and (self.helpTransitions["/powered_on/charge"].enabled_event == None):
            self.firstTime = True
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/powered_on/charge"])
        allTransitions.extend(self.eventTransitions["/powered_on/charge"])
        allTransitions.extend(self.timeBreakpointTransitions["/powered_on/charge"])
        allTransitions.extend(self.genBreakpointTransitions["/powered_on/charge"])
        allTransitions.extend(self.createdTransitions["/powered_on/charge"])
        allTransitions.append(self.stopTransitions["/powered_on/charge"])
        allTransitions.append(self.pauseTransitions["/powered_on/charge"])
        allTransitions.append(self.helpTransitions["/powered_on/charge"])
        event = "exit: /powered_on/charge"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["battery", self.battery])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_on_apps_enter(self):
        self.current_state = self.states["/powered_on/apps"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            
            self.print_internal_state("/powered_on/apps")
            event = "entry: /powered_on/apps"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
        else:
            event = "re-entry: /powered_on/apps"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_on_apps_exit(self):
        index = 3
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        found = False
        for b in self.timeBreakpointTransitions["/powered_on/apps"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/powered_on/apps"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/powered_on/apps"].enabled_event == None) and (not found)) and (self.helpTransitions["/powered_on/apps"].enabled_event == None):
            self.firstTime = True
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/powered_on/apps"])
        allTransitions.extend(self.eventTransitions["/powered_on/apps"])
        allTransitions.extend(self.timeBreakpointTransitions["/powered_on/apps"])
        allTransitions.extend(self.genBreakpointTransitions["/powered_on/apps"])
        allTransitions.extend(self.createdTransitions["/powered_on/apps"])
        allTransitions.append(self.stopTransitions["/powered_on/apps"])
        allTransitions.append(self.pauseTransitions["/powered_on/apps"])
        allTransitions.append(self.helpTransitions["/powered_on/apps"])
        event = "exit: /powered_on/apps"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["battery", self.battery])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_off_not_charging_enter(self):
        self.current_state = self.states["/powered_off/not_charging"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            
            self.print_internal_state("/powered_off/not_charging")
            event = "entry: /powered_off/not_charging"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/powered_off/not_charging")
            
            self.print_prompt()
        else:
            event = "re-entry: /powered_off/not_charging"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _powered_off_not_charging_exit(self):
        index = 3
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/powered_off/not_charging"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/powered_off/not_charging"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/powered_off/not_charging"].enabled_event == None) and (not found)) and (self.helpTransitions["/powered_off/not_charging"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/powered_off/not_charging"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/powered_off/not_charging"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/powered_off/not_charging"])
        allTransitions.extend(self.eventTransitions["/powered_off/not_charging"])
        allTransitions.extend(self.timeBreakpointTransitions["/powered_off/not_charging"])
        allTransitions.extend(self.genBreakpointTransitions["/powered_off/not_charging"])
        allTransitions.extend(self.createdTransitions["/powered_off/not_charging"])
        allTransitions.append(self.stopTransitions["/powered_off/not_charging"])
        allTransitions.append(self.pauseTransitions["/powered_off/not_charging"])
        allTransitions.append(self.helpTransitions["/powered_off/not_charging"])
        event = "exit: /powered_off/not_charging"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["battery", self.battery])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_off_charging_enter(self):
        self.current_state = self.states["/powered_off/charging"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            self.charge_battery()
            
            self.print_internal_state("/powered_off/charging")
            event = "entry: /powered_off/charging"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
            timers = []
            if self.scaleFactor != float("inf"):
                self.addTimer(0, 15 / self.scaleFactor)
                timers.append(15)
                print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
                self.process_time_transitions(timers, "/powered_off/charging")
            else:
                self.addTimer(0, 15.0 / self.scaleFactor)
            self.process_event_transitions("/powered_off/charging")
            
            self.print_prompt()
        else:
            self.addTimer(0, 15.0 - ((self.localExecutionTime / 1000.0) / self.scaleFactor))
            event = "re-entry: /powered_off/charging"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _powered_off_charging_exit(self):
        self.removeTimer(0)
        index = 3
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/powered_off/charging"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/powered_off/charging"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/powered_off/charging"].enabled_event == None) and (not found)) and (self.helpTransitions["/powered_off/charging"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/powered_off/charging"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/powered_off/charging"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/powered_off/charging"])
        allTransitions.extend(self.eventTransitions["/powered_off/charging"])
        allTransitions.extend(self.timeBreakpointTransitions["/powered_off/charging"])
        allTransitions.extend(self.genBreakpointTransitions["/powered_off/charging"])
        allTransitions.extend(self.createdTransitions["/powered_off/charging"])
        allTransitions.append(self.stopTransitions["/powered_off/charging"])
        allTransitions.append(self.pauseTransitions["/powered_off/charging"])
        allTransitions.append(self.helpTransitions["/powered_off/charging"])
        event = "exit: /powered_off/charging"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["battery", self.battery])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_on_charge_not_charging_enter(self):
        self.current_state = self.states["/powered_on/charge/not_charging"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            
            self.print_internal_state("/powered_on/charge/not_charging")
            event = "entry: /powered_on/charge/not_charging"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/powered_on/charge/not_charging")
            
            self.print_prompt()
        else:
            event = "re-entry: /powered_on/charge/not_charging"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _powered_on_charge_not_charging_exit(self):
        index = 3
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/powered_on/charge/not_charging"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/powered_on/charge/not_charging"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/powered_on/charge/not_charging"].enabled_event == None) and (not found)) and (self.helpTransitions["/powered_on/charge/not_charging"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/powered_on/charge/not_charging"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/powered_on/charge/not_charging"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/powered_on/charge/not_charging"])
        allTransitions.extend(self.eventTransitions["/powered_on/charge/not_charging"])
        allTransitions.extend(self.timeBreakpointTransitions["/powered_on/charge/not_charging"])
        allTransitions.extend(self.genBreakpointTransitions["/powered_on/charge/not_charging"])
        allTransitions.extend(self.createdTransitions["/powered_on/charge/not_charging"])
        allTransitions.append(self.stopTransitions["/powered_on/charge/not_charging"])
        allTransitions.append(self.pauseTransitions["/powered_on/charge/not_charging"])
        allTransitions.append(self.helpTransitions["/powered_on/charge/not_charging"])
        event = "exit: /powered_on/charge/not_charging"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["battery", self.battery])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_on_charge_charging_enter(self):
        self.current_state = self.states["/powered_on/charge/charging"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            self.charge_battery()
            
            self.print_internal_state("/powered_on/charge/charging")
            event = "entry: /powered_on/charge/charging"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
            timers = []
            if self.scaleFactor != float("inf"):
                self.addTimer(1, 15 / self.scaleFactor)
                timers.append(15)
                print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
                self.process_time_transitions(timers, "/powered_on/charge/charging")
            else:
                self.addTimer(1, 15.0 / self.scaleFactor)
            self.process_event_transitions("/powered_on/charge/charging")
            
            self.print_prompt()
        else:
            self.addTimer(1, 15.0 - ((self.localExecutionTime / 1000.0) / self.scaleFactor))
            event = "re-entry: /powered_on/charge/charging"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _powered_on_charge_charging_exit(self):
        self.removeTimer(1)
        index = 3
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/powered_on/charge/charging"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/powered_on/charge/charging"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/powered_on/charge/charging"].enabled_event == None) and (not found)) and (self.helpTransitions["/powered_on/charge/charging"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/powered_on/charge/charging"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/powered_on/charge/charging"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/powered_on/charge/charging"])
        allTransitions.extend(self.eventTransitions["/powered_on/charge/charging"])
        allTransitions.extend(self.timeBreakpointTransitions["/powered_on/charge/charging"])
        allTransitions.extend(self.genBreakpointTransitions["/powered_on/charge/charging"])
        allTransitions.extend(self.createdTransitions["/powered_on/charge/charging"])
        allTransitions.append(self.stopTransitions["/powered_on/charge/charging"])
        allTransitions.append(self.pauseTransitions["/powered_on/charge/charging"])
        allTransitions.append(self.helpTransitions["/powered_on/charge/charging"])
        event = "exit: /powered_on/charge/charging"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["battery", self.battery])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_on_apps_homescreen_enter(self):
        self.current_state = self.states["/powered_on/apps/homescreen"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            
            self.print_internal_state("/powered_on/apps/homescreen")
            event = "entry: /powered_on/apps/homescreen"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/powered_on/apps/homescreen")
            
            self.print_prompt()
        else:
            event = "re-entry: /powered_on/apps/homescreen"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _powered_on_apps_homescreen_exit(self):
        index = 3
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/powered_on/apps/homescreen"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/powered_on/apps/homescreen"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/powered_on/apps/homescreen"].enabled_event == None) and (not found)) and (self.helpTransitions["/powered_on/apps/homescreen"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/powered_on/apps/homescreen"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/powered_on/apps/homescreen"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/powered_on/apps/homescreen"])
        allTransitions.extend(self.eventTransitions["/powered_on/apps/homescreen"])
        allTransitions.extend(self.timeBreakpointTransitions["/powered_on/apps/homescreen"])
        allTransitions.extend(self.genBreakpointTransitions["/powered_on/apps/homescreen"])
        allTransitions.extend(self.createdTransitions["/powered_on/apps/homescreen"])
        allTransitions.append(self.stopTransitions["/powered_on/apps/homescreen"])
        allTransitions.append(self.pauseTransitions["/powered_on/apps/homescreen"])
        allTransitions.append(self.helpTransitions["/powered_on/apps/homescreen"])
        event = "exit: /powered_on/apps/homescreen"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["battery", self.battery])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_on_apps_app_a_enter(self):
        self.current_state = self.states["/powered_on/apps/app_a"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            
            self.print_internal_state("/powered_on/apps/app_a")
            event = "entry: /powered_on/apps/app_a"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/powered_on/apps/app_a")
            
            self.print_prompt()
        else:
            event = "re-entry: /powered_on/apps/app_a"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _powered_on_apps_app_a_exit(self):
        index = 3
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/powered_on/apps/app_a"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/powered_on/apps/app_a"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/powered_on/apps/app_a"].enabled_event == None) and (not found)) and (self.helpTransitions["/powered_on/apps/app_a"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/powered_on/apps/app_a"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/powered_on/apps/app_a"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/powered_on/apps/app_a"])
        allTransitions.extend(self.eventTransitions["/powered_on/apps/app_a"])
        allTransitions.extend(self.timeBreakpointTransitions["/powered_on/apps/app_a"])
        allTransitions.extend(self.genBreakpointTransitions["/powered_on/apps/app_a"])
        allTransitions.extend(self.createdTransitions["/powered_on/apps/app_a"])
        allTransitions.append(self.stopTransitions["/powered_on/apps/app_a"])
        allTransitions.append(self.pauseTransitions["/powered_on/apps/app_a"])
        allTransitions.append(self.helpTransitions["/powered_on/apps/app_a"])
        event = "exit: /powered_on/apps/app_a"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["battery", self.battery])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _powered_on_apps_app_b_enter(self):
        self.current_state = self.states["/powered_on/apps/app_b"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            
            self.print_internal_state("/powered_on/apps/app_b")
            event = "entry: /powered_on/apps/app_b"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/powered_on/apps/app_b")
            
            self.print_prompt()
        else:
            event = "re-entry: /powered_on/apps/app_b"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _powered_on_apps_app_b_exit(self):
        index = 3
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/powered_on/apps/app_b"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/powered_on/apps/app_b"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/powered_on/apps/app_b"].enabled_event == None) and (not found)) and (self.helpTransitions["/powered_on/apps/app_b"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/powered_on/apps/app_b"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/powered_on/apps/app_b"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/powered_on/apps/app_b"])
        allTransitions.extend(self.eventTransitions["/powered_on/apps/app_b"])
        allTransitions.extend(self.timeBreakpointTransitions["/powered_on/apps/app_b"])
        allTransitions.extend(self.genBreakpointTransitions["/powered_on/apps/app_b"])
        allTransitions.extend(self.createdTransitions["/powered_on/apps/app_b"])
        allTransitions.append(self.stopTransitions["/powered_on/apps/app_b"])
        allTransitions.append(self.pauseTransitions["/powered_on/apps/app_b"])
        allTransitions.append(self.helpTransitions["/powered_on/apps/app_b"])
        event = "exit: /powered_on/apps/app_b"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["battery", self.battery])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _state_Debug_enter(self):
        if self.firstTime:
            self.firstTime = False
        self.debugging = True
        targets = list(self.active_states.queue)
        states_names = [s.name for s in targets]
        
        print(colors.fg.lightred),
        print("DEBUG MODE")
        print("Current States: {}".format(states_names))
        print("battery" + ": {}".format(self.battery))
        print(colors.reset),
        print(colors.fg.lightgrey +"[/state_Debug] > "+colors.reset),
    
    def _state_Debug_exit(self):
        self.cumulativeDebugTime = (self.getSimulatedTime() - self.executionTime)
        targets = list(self.active_states.queue)
        for t in targets:
            self.pauseTransitions[t.name].enabled_event = None
        if self.debugToFinal.enabled_event != None:
            event = "stop"
            allAttTuples = []
            allAttTuples.append(["battery", self.battery])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _state_Final_enter(self):
        outputName = "executionTrace"
        self.controller.stop()
        self.saveExecutionTrace(outputName)
        exit(1)
    
    def _state_Help_enter(self):
        if self.firstTime:
            self.firstTime = False
        print(colors.fg.yellow + "HELP - Available Commands:")
        print("1. " + colors.fg.orange +"pause" + colors.fg.yellow + " - Pauses the execution.")
        print("2. " + colors.fg.orange +"continue" + colors.fg.yellow + " - Continues the execution if it is paused.")
        print("3. " + colors.fg.orange +"step" + colors.fg.yellow + " - If there exists a time-based transition, this command will skip it.")
        print("4. " + colors.fg.orange +"stop" + colors.fg.yellow + " - Stops the execution completely and saves a trace with information about the simulation.")
        print("5. Possible "+ colors.fg.orange +"events"+ colors.fg.yellow + " to simulate are displayed at the arrival of each state if they are available.")
        print("6. To change the "+ colors.fg.orange + "Simulation Type"  + colors.fg.yellow +" and its " + colors.fg.orange +"Scale Factor" + colors.fg.yellow + ", use the flags " + colors.fg.orange + "-s" + colors.fg.yellow + " and " + colors.fg.orange + "-f" + colors.fg.yellow + ", respectively, when executing the generated file.")
        print("7. The " + colors.fg.orange +  "Simulation Type" + colors.fg.yellow + ", " + colors.fg.orange + "-s" + colors.fg.yellow + " may have the following values: " + colors.fg.orange + "0" + colors.fg.yellow + " = Real-Time Simulation; "+ colors.fg.orange + "1" + colors.fg.yellow + " = Scaled Real-Time Simulation; " + colors.fg.orange + "2" + colors.fg.yellow + " = As-fast-as-possible Simulation.")
        print("8. When using the Scaled Real-Time Simulation, a "+ colors.fg.orange + "Scale Factor" + colors.fg.yellow + ", " + colors.fg.orange + "-f" + colors.fg.yellow + " may be added. Its value may be any number > 0.")
        print("9. To add a " + colors.fg.orange + "breakpoint" + colors.fg.yellow + ", edit the " + colors.fg.orange + "breakpoints.xml" + colors.fg.yellow +" file directly." + colors.reset)
        self.addTimer(2, 0)
    
    
    def _state_Help_exit(self):
        self.removeTimer(2)
        targets = list(self.active_states.queue)
        for t in targets:
            self.helpTransitions[t.name].enabled_event = None
    
    def process_time_transitions(self, timers, state_name):
        iteration = 0
        chosen = None
        lowest = timers[0]
        for t in self.timedTransitions[state_name]:
            if lowest >= timers[iteration]:
                lowest = timers[iteration]
                chosen = t
            iteration = iteration + 1
        if iteration > 0:
            temp = Transition(self, chosen.source, chosen.targets)
            temp.setTrigger(Event("step", self.getInPortName("input")))
            temp.setAction(chosen.action)
            temp.setGuard(chosen.guard)
            if not self.listContains(self.createdTransitions[state_name], temp):
                self.createdTransitions[state_name].append(temp)
                chosen.source.addTransition(temp)
            attrs = [s.name for s in chosen.targets]
            guard = ((inspect.getsourcelines(chosen.guard)[0][1].split('return')[1]).lstrip())[:-1] if chosen.guard != None else chosen.guard
            print((colors.fg.lightgreen + "[time-based]" + colors.fg.lightgrey +" type " + colors.fg.pink +"step" + colors.fg.lightgrey + " to skip the transition to "+ colors.fg.cyan +"{}" + colors.fg.lightgrey +" which has a duration of " + colors.fg.pink + "{}" + colors.fg.lightgrey +" seconds and the guard condition " + colors.fg.pink + "{}" + colors.reset).format(attrs, lowest, guard))
    
    def process_event_transitions(self, state_name):
        possibleT = self.eventTransitions[state_name]
        for t in possibleT:
            attrs = [s.name for s in t.targets]
            guard = ((inspect.getsourcelines(t.guard)[0][1].split('return')[1]).lstrip())[:-1] if t.guard != None else t.guard
            print((colors.fg.lightgreen + "[event-based]"  + colors.fg.lightgrey +" type " + colors.fg.pink +"{}"+ colors.fg.lightgrey + " to perform the transition to "+ colors.fg.cyan + "{}" + colors.fg.lightgrey + " with the guard condition " + colors.fg.pink + "{}"+ colors.reset).format(t.trigger.name, attrs, guard))
    
    def print_internal_state(self, state_name):
        print("\n" + ((colors.fg.lightgrey + "Entered ") + (colors.fg.cyan + state_name)))
        print(colors.fg.cyan + "battery" + (": {}" + colors.reset).format(self.battery))
    
    def print_prompt(self):
        print(colors.fg.lightgrey +"["),
        size = len(self.active_states.queue)
        iteration = 0
        for s in list(self.active_states.queue):
            print(s.name),
            if iteration < (size - 1):
                print(", "),
            iteration = (iteration + 1)
        print("] > "+colors.reset),
    
    def saveExecutionTrace(self, outputName):
        currDir = os.getcwd()
        flag = False
        biggestSize = 0
        for entry in os.listdir(currDir):
            if os.path.isfile(os.path.join(currDir, entry)) and (outputName) in entry and len(entry) > biggestSize:
                outputName = entry[:-4] + "_1" + ".txt"
                flag = True
                biggestSize = len(entry)
                
        if not flag:
            outputName = outputName + ".txt"
        
        simTime = "Total Simulation Time: " + str(float(self.getSimulatedTime())) + " ms (includes Debug Time)"
        exTime = "Execution Time: " + str(self.executionTime) + " ms"
        debugTime = "Total Debug Time: " + str(self.cumulativeDebugTime) + " ms"
        
        f = FileWriter(outputName)
        f.write("Execution Info")
        f.write("")
        f.write(simTime)
        f.write(exTime)
        f.write(debugTime)
        f.write("")
        f.write("Events")
        for ide, event in enumerate(self.tracedEvents):
            eventName = event.getEventName()
            timestamp = event.getTimestamp()
            attributeValues = ""
            for v in event.getAttributeValues():
                attributeValues += v[0] + ": " + str(v[1]) + "; "
            eventInfo = str(ide) + ". Timestamp: " + str(timestamp) +  "; Name: " + eventName + ";  Attributes: ["  + attributeValues + "]"
            # print(ide)
            # print(eventName)
            f.write(eventInfo)
        f.close() 
    
    def saveEvent(self, event_name, timestamp, attribute_values):
        self.tracedEvents.append(TracedEvent(event_name, timestamp, attribute_values))
    
    def listContains(self, transitions, newTransition):
        flag = False
        for t in transitions:
            if ((((t.source == newTransition.source) and (t.targets == newTransition.targets)) and (t.trigger.name == newTransition.trigger.name)) and (t.trigger.port == newTransition.trigger.port)) and (t.action == newTransition.action):
                flag = True
        return flag
    
    def _powered_off_not_charging_0_guard(self, parameters):
        return self.battery >= self.min_battery
    
    def _powered_off_charging_0_guard(self, parameters):
        return self.battery >= self.min_battery
    
    def _powered_off_charging_2_guard(self, parameters):
        return self.max_battery > self.battery
    
    def _powered_on_charge_charging_1_guard(self, parameters):
        return self.max_battery > self.battery
    
    def continueGuard_state_Debug(self, parameters):
        return self.debugging
    
    def continueGuard_powered_off(self, parameters):
        return list(self.active_states.queue) == list([self.states["/powered_off"]])
    
    def continueGuard_powered_off_not_charging(self, parameters):
        return list(self.active_states.queue) == list([self.states["/powered_off/not_charging"]])
    
    def continueGuard_powered_off_charging(self, parameters):
        return list(self.active_states.queue) == list([self.states["/powered_off/charging"]])
    
    def continueGuard_powered_on(self, parameters):
        return list(self.active_states.queue) == list([self.states["/powered_on"]])
    
    def continueGuard_powered_on_charge(self, parameters):
        return list(self.active_states.queue) == list([self.states["/powered_on/charge"]])
    
    def continueGuard_powered_on_charge_not_charging(self, parameters):
        return list(self.active_states.queue) == list([self.states["/powered_on/charge/not_charging"]])
    
    def continueGuard_powered_on_charge_charging(self, parameters):
        return list(self.active_states.queue) == list([self.states["/powered_on/charge/charging"]])
    
    def continueGuard_powered_on_apps(self, parameters):
        return list(self.active_states.queue) == list([self.states["/powered_on/apps"]])
    
    def continueGuard_powered_on_apps_homescreen(self, parameters):
        return list(self.active_states.queue) == list([self.states["/powered_on/apps/homescreen"]])
    
    def continueGuard_powered_on_apps_app_a(self, parameters):
        return list(self.active_states.queue) == list([self.states["/powered_on/apps/app_a"]])
    
    def continueGuard_powered_on_apps_app_b(self, parameters):
        return list(self.active_states.queue) == list([self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb0(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"]])
    
    def continueGuardComb1(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"]])
    
    def continueGuardComb2(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"]])
    
    def continueGuardComb3(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb4(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge"]])
    
    def continueGuardComb5(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps"]])
    
    def continueGuardComb6(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"]])
    
    def continueGuardComb7(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"]])
    
    def continueGuardComb8(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb9(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/charge"]])
    
    def continueGuardComb10(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps"]])
    
    def continueGuardComb11(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"]])
    
    def continueGuardComb12(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb13(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"]])
    
    def continueGuardComb14(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps"]])
    
    def continueGuardComb15(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb16(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
    
    def continueGuardComb17(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
    
    def continueGuardComb18(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb19(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb20(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb21(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"]])
    
    def continueGuardComb22(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"]])
    
    def continueGuardComb23(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb24(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/charge"]])
    
    def continueGuardComb25(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps"]])
    
    def continueGuardComb26(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"]])
    
    def continueGuardComb27(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb28(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"]])
    
    def continueGuardComb29(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps"]])
    
    def continueGuardComb30(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb31(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
    
    def continueGuardComb32(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
    
    def continueGuardComb33(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb34(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb35(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb36(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"]])
    
    def continueGuardComb37(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb38(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"]])
    
    def continueGuardComb39(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps"]])
    
    def continueGuardComb40(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb41(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
    
    def continueGuardComb42(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
    
    def continueGuardComb43(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb44(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb45(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb46(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb47(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
    
    def continueGuardComb48(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
    
    def continueGuardComb49(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb50(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb51(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb52(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb53(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb54(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb55(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb56(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"]])
    
    def continueGuardComb57(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb58(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"]])
    
    def continueGuardComb59(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps"]])
    
    def continueGuardComb60(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb61(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
    
    def continueGuardComb62(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
    
    def continueGuardComb63(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb64(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb65(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb66(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb67(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
    
    def continueGuardComb68(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
    
    def continueGuardComb69(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb70(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb71(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb72(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb73(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb74(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb75(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb76(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb77(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
    
    def continueGuardComb78(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
    
    def continueGuardComb79(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb80(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb81(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb82(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb83(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb84(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb85(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb86(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb87(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb88(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb89(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb90(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb91(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"]])
    
    def continueGuardComb92(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"]])
    
    def continueGuardComb93(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps"]])
    
    def continueGuardComb94(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb95(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb96(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb97(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb98(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb99(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb100(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb101(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb102(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb103(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb104(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb105(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb106(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb107(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb108(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb109(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb110(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb111(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb112(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"]])
    
    def continueGuardComb113(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/apps"]])
    
    def continueGuardComb114(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb115(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb116(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb117(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb118(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def continueGuardComb119(self, parameters):
        return sorted(list(self.active_states.queue)) == sorted([self.states["/powered_on/charge/not_charging"], self.states["/powered_on/charge/charging"], self.states["/powered_on/apps/homescreen"], self.states["/powered_on/apps/app_a"], self.states["/powered_on/apps/app_b"], self.states["/powered_on/charge"], self.states["/powered_on/apps"]])
    
    def initializeStatechart(self):
        # enter default state
        print(colors.fg.yellow + "Type " + colors.fg.orange + "help" + colors.fg.yellow + " to see the available commands." + colors.reset)
        event = "start"
        allAttTuples = []
        allAttTuples.append(["battery", self.battery])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
        self.default_targets = self.states["/powered_off"].getEffectiveTargetStates()
        RuntimeClassBase.initializeStatechart(self)

class ObjectManager(ObjectManagerBase):
    def __init__(self, controller):
        ObjectManagerBase.__init__(self, controller)
    
    def instantiate(self, class_name, construct_params):
        if class_name == "Phone":
            instance = Phone(self.controller)
            instance.associations = {}
        else:
            raise Exception("Cannot instantiate class " + class_name)
        return instance

class Controller(ThreadsControllerBase):
    def __init__(self, keep_running = None, behind_schedule_callback = None):
        if keep_running == None: keep_running = True
        if behind_schedule_callback == None: behind_schedule_callback = None
        ThreadsControllerBase.__init__(self, ObjectManager(self), keep_running, behind_schedule_callback)
        self.addInputPort("input")
        self.addOutputPort("output")
        self.object_manager.createInstance("Phone", [])