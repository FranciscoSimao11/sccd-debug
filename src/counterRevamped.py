"""
Generated by Statechart compiler by Glenn De Jonghe, Joeri Exelmans, Simon Van Mierlo, and Yentl Van Tendeloo (for the inspiration)

Model author: Francisco Simoes
Model name:   Counter

"""

#from sccd.runtime.statecharts_core import *
from python_sccd.python_sccd_runtime.statecharts_core import *
from sccd.runtime.libs.ui import ui
import sccd.runtime.accurate_time

# package "Counter"

class MainApp(RuntimeClassBase):
    def __init__(self, controller):
        RuntimeClassBase.__init__(self, controller)
        
        self.debugFlag = False
        self.startTime = 0
        self.timeDiff = 0
        
        self.semantics.big_step_maximality = StatechartSemantics.TakeMany
        self.semantics.internal_event_lifeline = StatechartSemantics.Queue
        self.semantics.input_event_lifeline = StatechartSemantics.FirstComboStep
        self.semantics.priority = StatechartSemantics.SourceParent
        self.semantics.concurrency = StatechartSemantics.Single
        
        # build Statechart structure
        self.build_statechart_structure()
        
        # call user defined constructor
        MainApp.user_defined_constructor(self)
        
    
    def user_defined_constructor(self):
        self.counter = 0
    
    def user_defined_destructor(self):
        pass
    
    
    # user defined method
    def increment_counter(self):
        self.counter = self.counter + 1
        print ("counter: ", self.counter)
        print(self.current_state)
    
    # builds Statechart structure
    def build_statechart_structure(self):
        
        # state <root>
        self.states[""] = State(0, "", self)
        #self.current_state = self.states[""]
        
        # state /state_A
        self.states["/state_A"] = State(1, "/state_A", self)
        self.states["/state_A"].setEnter(self._state_A_enter)
        self.states["/state_A"].setExit(self._state_A_exit)
        
        # state /state_B
        self.states["/state_B"] = State(2, "/state_B", self)
        self.states["/state_B"].setEnter(self._state_B_enter)
        
        self.states["/state_Debug"] = State(3, "/state_Debug", self)
        self.states["/state_Debug"].setEnter(self._state_Debug_enter)
        
        # self.states["/state_Debug"].setExit(self._state_Debug_exit)
        pauseEv = Event("pause", self.getInPortName("input"))
        continueEv = Event("continue", self.getInPortName("input"))
        
        # add children
        self.states[""].addChild(self.states["/state_A"])
        self.states[""].addChild(self.states["/state_B"])
        self.states[""].addChild(self.states["/state_Debug"])
        self.states[""].fixTree()
        self.states[""].default_state = self.states["/state_A"]
        
        # transition /state_A
        _state_A_0 = Transition(self, self.states["/state_A"], [self.states["/state_B"]])
        _state_A_0.setTrigger(Event("_0after"))
        self.states["/state_A"].addTransition(_state_A_0)
        
        # transition /state_B
        _state_B_0 = Transition(self, self.states["/state_B"], [self.states["/state_A"]])
        _state_B_0.setTrigger(Event("move", self.getInPortName("input")))
        self.states["/state_B"].addTransition(_state_B_0)
        
        # transitions to /state_Debug
        _state_A_toDebug = Transition(self, self.states["/state_A"], [self.states["/state_Debug"]])
        _state_B_toDebug = Transition(self, self.states["/state_B"], [self.states["/state_Debug"]])
        _state_A_toDebug.setTrigger(pauseEv)
        _state_B_toDebug.setTrigger(pauseEv)
        self.states["/state_A"].addTransition(_state_A_toDebug)
        self.states["/state_B"].addTransition(_state_B_toDebug)
        
        # transitions from /state_Debug
        _state_Debug_toA = Transition(self, self.states["/state_Debug"], [self.states["/state_A"]])
        _state_Debug_toA.setTrigger(continueEv)
        _state_Debug_toA.setGuard(self.continueGuardA)
        self.states["/state_Debug"].addTransition(_state_Debug_toA)
        
        _state_Debug_toB = Transition(self, self.states["/state_Debug"], [self.states["/state_B"]])
        _state_Debug_toB.setTrigger(continueEv)
        _state_Debug_toB.setGuard(self.continueGuardB)
        self.states["/state_Debug"].addTransition(_state_Debug_toB)       
    
    def continueGuardA(self, parameters):
        return (self.current_state == self.states["/state_A"])
    
    def continueGuardB(self, parameters):
        return (self.current_state == self.states["/state_B"])
    
    def _state_A_enter(self):
        print("state A")
        self.current_state = self.states["/state_A"]
        if self.debugFlag == False:
            self.increment_counter()
            self.addTimer(0, 10)
            self.startTime = self.getSimulatedTime()
            print(self.startTime)
        else:
            self.debugFlag = False
            self.addTimer(0, self.timeDiff)
    
    def _state_A_exit(self):
        self.timeDiff = (self.getSimulatedTime() - self.startTime)/1000 
        self.removeTimer(0)
    
    def _state_B_enter(self):
        print("state B")
        self.current_state = self.states["/state_B"]
        if self.debugFlag == False:
            self.increment_counter()
        else:
            self.debugFlag = False
        
        
    def _state_Debug_enter(self):
        print("NOW IN DEBUG -> COUNTER: {}".format(self.counter))
        self.debugFlag = True

    def initializeStatechart(self):
        # enter default state
        self.default_targets = self.states["/state_A"].getEffectiveTargetStates()
        RuntimeClassBase.initializeStatechart(self)

class ObjectManager(ObjectManagerBase):
    def __init__(self, controller):
        ObjectManagerBase.__init__(self, controller)
    
    def instantiate(self, class_name, construct_params):
        if class_name == "MainApp":
            instance = MainApp(self.controller)
            instance.associations = {}
        else:
            raise Exception("Cannot instantiate class " + class_name)
        return instance

class Controller(ThreadsControllerBase):
    def __init__(self, keep_running = None, behind_schedule_callback = None):
        if keep_running == None: keep_running = True
        if behind_schedule_callback == None: behind_schedule_callback = None
        ThreadsControllerBase.__init__(self, ObjectManager(self), keep_running, behind_schedule_callback)
        DebugController(self)
        self.addInputPort("input")
        self.addOutputPort("output")
        self.object_manager.createInstance("MainApp", [])

class DebugController(DebugControllerBase):
    def __init__(self, controller):
        DebugControllerBase.__init__(self, controller)
        
    def instantiate(self):
        pass