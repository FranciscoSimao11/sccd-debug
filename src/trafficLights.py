"""
Generated by Statechart compiler by Glenn De Jonghe, Joeri Exelmans, Simon Van Mierlo, and Yentl Van Tendeloo (for the inspiration)

Model author: Francisco Simoes
Model name:   Traffic_Lights

"""

from python_sccd.python_sccd_runtime.statecharts_core import *
from sccd.runtime.statecharts_core import *
from imports.colors import *
import argparse
from sccd.compiler.utils import FileWriter
import os

# package "Traffic_Lights"

class MainApp(RuntimeClassBase):
    def __init__(self, controller):
        RuntimeClassBase.__init__(self, controller)
        
        self.semantics.big_step_maximality = StatechartSemantics.TakeMany
        self.semantics.internal_event_lifeline = StatechartSemantics.Queue
        self.semantics.input_event_lifeline = StatechartSemantics.FirstComboStep
        self.semantics.priority = StatechartSemantics.SourceParent
        self.semantics.concurrency = StatechartSemantics.Single
        
        self.firstTime = True
        self.didCalcs = Queue()
        self.active_states = Queue()
        self.startTime = 0.0
        self.executionTime = 0.0
        self.localExecutionTime = 0.0
        self.cumulativeDebugTime = 0.0
        self.tracedEvents = []
        self.debugging = False
        self.expiredTimestamps = []
        
        # set execution speed
        self.setSimulationSpeed()
        
        # build Statechart structure
        self.build_statechart_structure()
        
        # call user defined constructor
        MainApp.user_defined_constructor(self)
    
    def user_defined_constructor(self):
        pass
    
    def setSimulationSpeed(self):
        
        parser = argparse.ArgumentParser(prog="python -m sccd.compiler.sccdc")
        parser.add_argument('-s','--simType', help='Simulation type which has 3 different variations: 0 = default simulation, scale factor of 1; 1 = scaled real-time simulation, takes one extra arg to set the scale factor; 2 = as-fast-as-possible simulation, scale factor = infinity', default=0)
        parser.add_argument('-f','--factor', help='Scale factor: default value is 1; if the factor is 2, the simulation 2x faster', default=1)
        args = vars(parser.parse_args())
        
        if args['simType'] is not None:
            args['simType'] = float(args['simType'])
            args['factor'] = float(args['factor'])
            self.scaleFactor = 1.0
            if args['simType'] == 0:
                print(colors.fg.yellow+"Real-time Simulation")
            elif args['simType'] == 1:
                print(colors.fg.yellow+"Scaled Real-time Simulation")
                if args['factor'] is not None and args['factor'] > 0:
                    self.scaleFactor = args['factor']
            elif args['simType'] == 2:
                print(colors.fg.yellow+"As-fast-as-possible Simulation")
                self.scaleFactor = float('inf')
            else:
                print(colors.fg.yellow+"Invalid simulation type. Defaulting to Real-time Simulation")
                self.scaleFactor = 1.0
            print(colors.fg.yellow+"Scale Factor: {}".format(self.scaleFactor)+colors.reset)
    
    def user_defined_destructor(self):
        pass
    
    
    # builds Statechart structure
    def build_statechart_structure(self):
        
        # state <root>
        self.states[""] = State(0, "", self)
        
        # state /initializing
        self.states["/initializing"] = State(1, "/initializing", self)
        self.states["/initializing"].setEnter(self._initializing_enter)
        self.states["/initializing"].setExit(self._initializing_exit)
        
        # state /creating
        self.states["/creating"] = State(2, "/creating", self)
        self.states["/creating"].setEnter(self._creating_enter)
        self.states["/creating"].setExit(self._creating_exit)
        
        # state /initialized
        self.states["/initialized"] = State(3, "/initialized", self)
        self.states["/initialized"].setEnter(self._initialized_enter)
        self.states["/initialized"].setExit(self._initialized_exit)
        
        # state /state_Debug
        self.states["/state_Debug"] = State(4, "/state_Debug", self)
        self.states["/state_Debug"].setEnter(self._state_Debug_enter)
        self.states["/state_Debug"].setExit(self._state_Debug_exit)
        
        # state /state_Final
        self.states["/state_Final"] = State(5, "/state_Final", self)
        self.states["/state_Final"].setEnter(self._state_Final_enter)
        
        # state /state_Help
        self.states["/state_Help"] = State(6, "/state_Help", self)
        self.states["/state_Help"].setEnter(self._state_Help_enter)
        self.states["/state_Help"].setExit(self._state_Help_exit)
        
        # debug events
        pauseEvent = Event("pause", self.getInPortName("input"))
        stopEvent = Event("stop", self.getInPortName("input"))
        continueEvent = Event("continue", self.getInPortName("input"))
        helpEvent = Event("help", self.getInPortName("input"))
        
        # debug transitions
        self.pauseTransitions = {}
        self.timedTransitions = {}
        self.eventTransitions = {}
        self.createdTransitions = {}
        self.stopTransitions = {}
        self.helpTransitions = {}
        self.timeBreakpointTransitions = {}
        self.genBreakpointTransitions = {}
        
        # add children
        self.states[""].addChild(self.states["/initializing"])
        self.states[""].addChild(self.states["/creating"])
        self.states[""].addChild(self.states["/initialized"])
        self.states[""].addChild(self.states["/state_Debug"])
        self.states[""].addChild(self.states["/state_Final"])
        self.states[""].addChild(self.states["/state_Help"])
        self.states[""].fixTree()
        self.states[""].default_state = self.states["/initializing"]
        
        # transition /initializing
        self.eventTransitions["/initializing"] = []
        self.timedTransitions["/initializing"] = []
        self.createdTransitions["/initializing"] = []
        self.timeBreakpointTransitions["/initializing"] = []
        self.genBreakpointTransitions["/initializing"] = []
        _initializing_0 = Transition(self, self.states["/initializing"], [self.states["/creating"]])
        _initializing_0.setAction(self._initializing_0_exec)
        _initializing_0.setTrigger(None)
        self.states["/initializing"].addTransition(_initializing_0)
        
        # transition /creating
        self.eventTransitions["/creating"] = []
        self.timedTransitions["/creating"] = []
        self.createdTransitions["/creating"] = []
        self.timeBreakpointTransitions["/creating"] = []
        self.genBreakpointTransitions["/creating"] = []
        _creating_0 = Transition(self, self.states["/creating"], [self.states["/initialized"]])
        _creating_0.setAction(self._creating_0_exec)
        _creating_0.setTrigger(Event("instance_created", None))
        self.states["/creating"].addTransition(_creating_0)
        self.eventTransitions["/creating"].append(_creating_0)
        
        # transition /initialized
        self.eventTransitions["/initialized"] = []
        self.timedTransitions["/initialized"] = []
        self.createdTransitions["/initialized"] = []
        self.timeBreakpointTransitions["/initialized"] = []
        self.genBreakpointTransitions["/initialized"] = []
        
        # transitions /state_Debug
        # /state_Debug to /state_Help
        state_Debug_to_state_Help = Transition(self, self.states["/state_Debug"], [self.states["/state_Help"]])
        state_Debug_to_state_Help.setTrigger(helpEvent)
        self.states["/state_Debug"].addTransition(state_Debug_to_state_Help)
        
        # /state_Help to /state_Debug
        state_Help_to_state_Debug = Transition(self, self.states["/state_Help"], [self.states["/state_Debug"]])
        state_Help_to_state_Debug.setTrigger(Event("_0after"))
        state_Help_to_state_Debug.setGuard(self.continueGuard_state_Debug)
        self.states["/state_Help"].addTransition(state_Help_to_state_Debug)
        # _initializing to /state_Debug
        _initializing_to_state_Debug = Transition(self, self.states["/initializing"], [self.states["/state_Debug"]])
        _initializing_to_state_Debug.setTrigger(pauseEvent)
        self.states["/initializing"].addTransition(_initializing_to_state_Debug)
        self.pauseTransitions["/initializing"] = _initializing_to_state_Debug
        
        # initializing from /state_Debug
        _state_Debug_to_initializing = Transition(self, self.states["/state_Debug"], [self.states["/initializing"]])
        _state_Debug_to_initializing.setTrigger(continueEvent)
        _state_Debug_to_initializing.setGuard(self.continueGuard_initializing)
        self.states["/state_Debug"].addTransition(_state_Debug_to_initializing)
        
        # _initializing to /state_Help
        _initializing_to_state_Help = Transition(self, self.states["/initializing"], [self.states["/state_Help"]])
        _initializing_to_state_Help.setTrigger(helpEvent)
        self.states["/initializing"].addTransition(_initializing_to_state_Help)
        self.helpTransitions["/initializing"] = _initializing_to_state_Help
        
        # initializing from /state_Help
        _state_Help_to_initializing = Transition(self, self.states["/state_Help"], [self.states["/initializing"]])
        _state_Help_to_initializing.setTrigger(Event("_0after"))
        _state_Help_to_initializing.setGuard(self.continueGuard_initializing)
        self.states["/state_Help"].addTransition(_state_Help_to_initializing)
        
        # _initializing to /state_Final
        _initializing_to_state_Final = Transition(self, self.states["/initializing"], [self.states["/state_Final"]])
        _initializing_to_state_Final.setTrigger(stopEvent)
        self.states["/initializing"].addTransition(_initializing_to_state_Final)
        self.stopTransitions["/initializing"] = _initializing_to_state_Final
        
        # _creating to /state_Debug
        _creating_to_state_Debug = Transition(self, self.states["/creating"], [self.states["/state_Debug"]])
        _creating_to_state_Debug.setTrigger(pauseEvent)
        self.states["/creating"].addTransition(_creating_to_state_Debug)
        self.pauseTransitions["/creating"] = _creating_to_state_Debug
        
        # creating from /state_Debug
        _state_Debug_to_creating = Transition(self, self.states["/state_Debug"], [self.states["/creating"]])
        _state_Debug_to_creating.setTrigger(continueEvent)
        _state_Debug_to_creating.setGuard(self.continueGuard_creating)
        self.states["/state_Debug"].addTransition(_state_Debug_to_creating)
        
        # _creating to /state_Help
        _creating_to_state_Help = Transition(self, self.states["/creating"], [self.states["/state_Help"]])
        _creating_to_state_Help.setTrigger(helpEvent)
        self.states["/creating"].addTransition(_creating_to_state_Help)
        self.helpTransitions["/creating"] = _creating_to_state_Help
        
        # creating from /state_Help
        _state_Help_to_creating = Transition(self, self.states["/state_Help"], [self.states["/creating"]])
        _state_Help_to_creating.setTrigger(Event("_0after"))
        _state_Help_to_creating.setGuard(self.continueGuard_creating)
        self.states["/state_Help"].addTransition(_state_Help_to_creating)
        
        # _creating to /state_Final
        _creating_to_state_Final = Transition(self, self.states["/creating"], [self.states["/state_Final"]])
        _creating_to_state_Final.setTrigger(stopEvent)
        self.states["/creating"].addTransition(_creating_to_state_Final)
        self.stopTransitions["/creating"] = _creating_to_state_Final
        
        # _initialized to /state_Debug
        _initialized_to_state_Debug = Transition(self, self.states["/initialized"], [self.states["/state_Debug"]])
        _initialized_to_state_Debug.setTrigger(pauseEvent)
        self.states["/initialized"].addTransition(_initialized_to_state_Debug)
        self.pauseTransitions["/initialized"] = _initialized_to_state_Debug
        
        # initialized from /state_Debug
        _state_Debug_to_initialized = Transition(self, self.states["/state_Debug"], [self.states["/initialized"]])
        _state_Debug_to_initialized.setTrigger(continueEvent)
        _state_Debug_to_initialized.setGuard(self.continueGuard_initialized)
        self.states["/state_Debug"].addTransition(_state_Debug_to_initialized)
        
        # _initialized to /state_Help
        _initialized_to_state_Help = Transition(self, self.states["/initialized"], [self.states["/state_Help"]])
        _initialized_to_state_Help.setTrigger(helpEvent)
        self.states["/initialized"].addTransition(_initialized_to_state_Help)
        self.helpTransitions["/initialized"] = _initialized_to_state_Help
        
        # initialized from /state_Help
        _state_Help_to_initialized = Transition(self, self.states["/state_Help"], [self.states["/initialized"]])
        _state_Help_to_initialized.setTrigger(Event("_0after"))
        _state_Help_to_initialized.setGuard(self.continueGuard_initialized)
        self.states["/state_Help"].addTransition(_state_Help_to_initialized)
        
        # _initialized to /state_Final
        _initialized_to_state_Final = Transition(self, self.states["/initialized"], [self.states["/state_Final"]])
        _initialized_to_state_Final.setTrigger(stopEvent)
        self.states["/initialized"].addTransition(_initialized_to_state_Final)
        self.stopTransitions["/initialized"] = _initialized_to_state_Final
        
    
    def _initializing_enter(self):
        self.current_state = self.states["/initializing"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            
            self.print_internal_state("/initializing")
            event = "entry: /initializing"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/initializing")
            
            self.print_prompt()
        else:
            event = "re-entry: /initializing"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _initializing_exit(self):
        index = 1
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/initializing"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/initializing"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/initializing"].enabled_event == None) and (not found)) and (self.helpTransitions["/initializing"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/initializing"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/initializing"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/initializing"])
        allTransitions.extend(self.eventTransitions["/initializing"])
        allTransitions.extend(self.timeBreakpointTransitions["/initializing"])
        allTransitions.extend(self.genBreakpointTransitions["/initializing"])
        allTransitions.extend(self.createdTransitions["/initializing"])
        allTransitions.append(self.stopTransitions["/initializing"])
        allTransitions.append(self.pauseTransitions["/initializing"])
        allTransitions.append(self.helpTransitions["/initializing"])
        event = "exit: /initializing"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _creating_enter(self):
        self.current_state = self.states["/creating"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            
            self.print_internal_state("/creating")
            event = "entry: /creating"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/creating")
            
            self.print_prompt()
        else:
            event = "re-entry: /creating"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _creating_exit(self):
        index = 1
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/creating"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/creating"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/creating"].enabled_event == None) and (not found)) and (self.helpTransitions["/creating"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/creating"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/creating"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/creating"])
        allTransitions.extend(self.eventTransitions["/creating"])
        allTransitions.extend(self.timeBreakpointTransitions["/creating"])
        allTransitions.extend(self.genBreakpointTransitions["/creating"])
        allTransitions.extend(self.createdTransitions["/creating"])
        allTransitions.append(self.stopTransitions["/creating"])
        allTransitions.append(self.pauseTransitions["/creating"])
        allTransitions.append(self.helpTransitions["/creating"])
        event = "exit: /creating"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _initialized_enter(self):
        self.current_state = self.states["/initialized"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            
            self.print_internal_state("/initialized")
            event = "entry: /initialized"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
            self.print_prompt()
        else:
            event = "re-entry: /initialized"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _initialized_exit(self):
        index = 1
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/initialized"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/initialized"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/initialized"].enabled_event == None) and (not found)) and (self.helpTransitions["/initialized"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/initialized"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/initialized"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/initialized"])
        allTransitions.extend(self.eventTransitions["/initialized"])
        allTransitions.extend(self.timeBreakpointTransitions["/initialized"])
        allTransitions.extend(self.genBreakpointTransitions["/initialized"])
        allTransitions.extend(self.createdTransitions["/initialized"])
        allTransitions.append(self.stopTransitions["/initialized"])
        allTransitions.append(self.pauseTransitions["/initialized"])
        allTransitions.append(self.helpTransitions["/initialized"])
        event = "exit: /initialized"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _state_Debug_enter(self):
        if self.firstTime:
            self.firstTime = False
        self.debugging = True
        targets = list(self.active_states.queue)
        states_names = [s.name for s in targets]
        
        print(colors.fg.lightred),
        print("DEBUG MODE")
        print("Current States: {}".format(states_names))
        print(colors.reset),
        print(colors.fg.lightgrey +"[/state_Debug] > "+colors.reset),
    
    def _state_Debug_exit(self):
        self.cumulativeDebugTime = (self.getSimulatedTime() - self.executionTime)
        targets = list(self.active_states.queue)
        for t in targets:
            self.pauseTransitions[t.name].enabled_event = None
    
    def _state_Final_enter(self):
        outputName = "executionTrace.txt"
        self.controller.stop()
        self.saveExecutionTrace(outputName)
        exit(1)
    
    def _state_Help_enter(self):
        if self.firstTime:
            self.firstTime = False
        print(colors.fg.yellow + "HELP - Available Commands:")
        print("1. " + colors.fg.orange +"pause" + colors.fg.yellow + " - Pauses the execution.")
        print("2. " + colors.fg.orange +"continue" + colors.fg.yellow + " - Continues the execution if it is paused.")
        print("3. " + colors.fg.orange +"step" + colors.fg.yellow + " - If there exists a time-based transition, this command will skip it.")
        print("4. " + colors.fg.orange +"stop" + colors.fg.yellow + " - Stops the execution completely and saves a trace with information about the simulation.")
        print("5. Possible "+ colors.fg.orange +"events"+ colors.fg.yellow + " to simulate are displayed at the arrival of each state if they are available.")
        print("6. To change the "+ colors.fg.orange + "Simulation Type"  + colors.fg.yellow +" and its " + colors.fg.orange +"Scale Factor" + colors.fg.yellow + ", use the flags " + colors.fg.orange + "-s" + colors.fg.yellow + " and " + colors.fg.orange + "-f" + colors.fg.yellow + ", respectively, when executing the generated file.")
        print("7. The " + colors.fg.orange +  "Simulation Type" + colors.fg.yellow + ", " + colors.fg.orange + "-s" + colors.fg.yellow + " may have the following values: " + colors.fg.orange + "0" + colors.fg.yellow + " = Real-Time Simulation; "+ colors.fg.orange + "1" + colors.fg.yellow + " = Scaled Real-Time Simulation; " + colors.fg.orange + "2" + colors.fg.yellow + " = As-fast-as-possible Simulation.")
        print("8. When using the Scaled Real-Time Simulation, a "+ colors.fg.orange + "Scale Factor" + colors.fg.yellow + ", " + colors.fg.orange + "-f" + colors.fg.yellow + " may be added. Its value may be any number > 0.")
        print("9. To add a " + colors.fg.orange + "breakpoint" + colors.fg.yellow + ", edit the " + colors.fg.orange + "breakpoints.xml" + colors.fg.yellow +" file directly." + colors.reset)
        self.addTimer(0, 0)
    
    
    def _state_Help_exit(self):
        self.removeTimer(0)
        targets = list(self.active_states.queue)
        for t in targets:
            self.helpTransitions[t.name].enabled_event = None
    
    def process_time_transitions(self, timers, state_name):
        iteration = 0
        chosen = None
        lowest = timers[0]
        for t in self.timedTransitions[state_name]:
            if lowest >= timers[iteration]:
                lowest = timers[iteration]
                chosen = t
            iteration = iteration + 1
        if iteration > 0:
            temp = Transition(self, chosen.source, chosen.targets)
            temp.setTrigger(Event("step", self.getInPortName("input")))
            temp.setAction(chosen.action)
            temp.setGuard(chosen.guard)
            if not self.listContains(self.createdTransitions[state_name], temp):
                self.createdTransitions[state_name].append(temp)
                chosen.source.addTransition(temp)
            attrs = [s.name for s in chosen.targets]
            print((colors.fg.lightgreen + "[time-based]" + colors.fg.lightgrey +" type " + colors.fg.pink +"step" + colors.fg.lightgrey + " to skip the transition to "+ colors.fg.cyan +"{}" + colors.fg.lightgrey +" which has a duration of " + colors.fg.pink + "{}" + colors.fg.lightgrey +" seconds and the guard condition " + colors.fg.pink + "{}" + colors.reset).format(attrs, lowest, chosen.guard))
    
    def process_event_transitions(self, state_name):
        possibleT = self.eventTransitions[state_name]
        for t in possibleT:
            attrs = [s.name for s in t.targets]
            print((colors.fg.lightgreen + "[event-based]"  + colors.fg.lightgrey +" type " + colors.fg.pink +"{}"+ colors.fg.lightgrey + " to perform the transition to "+ colors.fg.cyan + "{}" + colors.fg.lightgrey + " with the guard condition " + colors.fg.pink + "{}"+ colors.reset).format(t.trigger.name, attrs, t.guard))
    
    def print_internal_state(self, state_name):
        print("\n" + ((colors.fg.lightgrey + "Entered ") + (colors.fg.cyan + state_name)))
    
    def print_prompt(self):
        print(colors.fg.lightgrey +"["),
        size = len(self.active_states.queue)
        iteration = 0
        for s in list(self.active_states.queue):
            print(s.name),
            if iteration < (size - 1):
                print(", "),
            iteration = (iteration + 1)
        print("] > "+colors.reset),
    
    def saveExecutionTrace(self, outputName):
        currDir = os.getcwd()
        for entry in os.listdir(currDir):
            if os.path.isfile(os.path.join(currDir, entry)) and entry == outputName:
                outputName = outputName + "_1"
        
        simTime = "Total Simulation Time: " + str(float(self.getSimulatedTime())) + " ms (includes Debug Time)"
        exTime = "Execution Time: " + str(self.executionTime) + " ms"
        debugTime = "Total Debug Time: " + str(self.cumulativeDebugTime) + " ms"
        
        f = FileWriter(outputName)
        f.write("Execution Info")
        f.write("")
        f.write(simTime)
        f.write(exTime)
        f.write(debugTime)
        f.write("")
        f.write("Events")
        for ide, event in enumerate(self.tracedEvents):
            eventName = event.getEventName()
            timestamp = event.getTimestamp()
            attributeValues = ""
            for v in event.getAttributeValues():
                attributeValues += v[0] + ": " + str(v[1]) + "; "
            eventInfo = str(ide) + ". Timestamp: " + str(timestamp) +  "; Name: " + eventName + ";  Attributes: ["  + attributeValues + "]"
            # print(ide)
            # print(eventName)
            f.write(eventInfo)
        f.close() 
    
    def saveEvent(self, event_name, timestamp, attribute_values):
        self.tracedEvents.append(TracedEvent(event_name, timestamp, attribute_values))
    
    def listContains(self, transitions, newTransition):
        flag = False
        for t in transitions:
            if ((((t.source == newTransition.source) and (t.targets == newTransition.targets)) and (t.trigger.name == newTransition.trigger.name)) and (t.trigger.port == newTransition.trigger.port)) and (t.action == newTransition.action):
                flag = True
        return flag
    
    def _initializing_0_exec(self, parameters):
        self.big_step.outputEventOM(Event("create_instance", None, [self, "trafficlight", "TrafficLight"]))
    
    def _creating_0_exec(self, parameters):
        association_name = parameters[0]
        self.big_step.outputEventOM(Event("start_instance", None, [self, association_name]))
        self.big_step.outputEventOM(Event("narrow_cast", None, [self, association_name, Event("set_association_name", None, [association_name])]))
    
    def continueGuard_state_Debug(self, parameters):
        return self.debugging
    
    def continueGuard_initializing(self, parameters):
        return list(self.active_states.queue) == list([self.states["/initializing"]])
    
    def continueGuard_creating(self, parameters):
        return list(self.active_states.queue) == list([self.states["/creating"]])
    
    def continueGuard_initialized(self, parameters):
        return list(self.active_states.queue) == list([self.states["/initialized"]])
    
    def initializeStatechart(self):
        # enter default state
        print(colors.fg.yellow + "Type " + colors.fg.orange + "help" + colors.fg.yellow + " to see the available commands." + colors.reset)
        event = "start"
        allAttTuples = []
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
        self.default_targets = self.states["/initializing"].getEffectiveTargetStates()
        RuntimeClassBase.initializeStatechart(self)

class TrafficLight(RuntimeClassBase):
    def __init__(self, controller):
        RuntimeClassBase.__init__(self, controller)
        
        self.semantics.big_step_maximality = StatechartSemantics.TakeMany
        self.semantics.internal_event_lifeline = StatechartSemantics.Queue
        self.semantics.input_event_lifeline = StatechartSemantics.FirstComboStep
        self.semantics.priority = StatechartSemantics.SourceParent
        self.semantics.concurrency = StatechartSemantics.Single
        
        self.firstTime = True
        self.didCalcs = Queue()
        self.active_states = Queue()
        self.startTime = 0.0
        self.executionTime = 0.0
        self.localExecutionTime = 0.0
        self.cumulativeDebugTime = 0.0
        self.tracedEvents = []
        self.debugging = False
        self.expiredTimestamps = []
        
        # set execution speed
        self.setSimulationSpeed()
        
        # build Statechart structure
        self.build_statechart_structure()
        
        # user defined attributes
        self.light_color = 'green'
        
        # call user defined constructor
        TrafficLight.user_defined_constructor(self)
    
    def user_defined_constructor(self):
        pass
    
    def setSimulationSpeed(self):
        
        parser = argparse.ArgumentParser(prog="python -m sccd.compiler.sccdc")
        parser.add_argument('-s','--simType', help='Simulation type which has 3 different variations: 0 = default simulation, scale factor of 1; 1 = scaled real-time simulation, takes one extra arg to set the scale factor; 2 = as-fast-as-possible simulation, scale factor = infinity', default=0)
        parser.add_argument('-f','--factor', help='Scale factor: default value is 1; if the factor is 2, the simulation 2x faster', default=1)
        args = vars(parser.parse_args())
        
        if args['simType'] is not None:
            args['simType'] = float(args['simType'])
            args['factor'] = float(args['factor'])
            self.scaleFactor = 1.0
            if args['simType'] == 0:
                print(colors.fg.yellow+"Real-time Simulation")
            elif args['simType'] == 1:
                print(colors.fg.yellow+"Scaled Real-time Simulation")
                if args['factor'] is not None and args['factor'] > 0:
                    self.scaleFactor = args['factor']
            elif args['simType'] == 2:
                print(colors.fg.yellow+"As-fast-as-possible Simulation")
                self.scaleFactor = float('inf')
            else:
                print(colors.fg.yellow+"Invalid simulation type. Defaulting to Real-time Simulation")
                self.scaleFactor = 1.0
            print(colors.fg.yellow+"Scale Factor: {}".format(self.scaleFactor)+colors.reset)
    
    def user_defined_destructor(self):
        pass
    
    
    # user defined method
    def clear(self):
        self.light_color = "white"
    
    
    # user defined method
    def setGreen(self):
        self.light_color = "green"
    
    
    # user defined method
    def setYellow(self):
        self.light_color = "yellow"
    
    
    # user defined method
    def setRed(self):
        self.light_color = "red"
    
    
    # builds Statechart structure
    def build_statechart_structure(self):
        
        # state <root>
        self.states[""] = State(0, "", self)
        
        # state /on
        self.states["/on"] = State(1, "/on", self)
        self.states["/on"].setEnter(self._on_enter)
        self.states["/on"].setExit(self._on_exit)
        
        # state /on/normal
        self.states["/on/normal"] = State(2, "/on/normal", self)
        self.states["/on/normal"].setEnter(self._on_normal_enter)
        self.states["/on/normal"].setExit(self._on_normal_exit)
        
        # state /on/normal/red
        self.states["/on/normal/red"] = State(3, "/on/normal/red", self)
        self.states["/on/normal/red"].setEnter(self._on_normal_red_enter)
        self.states["/on/normal/red"].setExit(self._on_normal_red_exit)
        
        # state /on/normal/green
        self.states["/on/normal/green"] = State(4, "/on/normal/green", self)
        self.states["/on/normal/green"].setEnter(self._on_normal_green_enter)
        self.states["/on/normal/green"].setExit(self._on_normal_green_exit)
        
        # state /on/normal/yellow
        self.states["/on/normal/yellow"] = State(5, "/on/normal/yellow", self)
        self.states["/on/normal/yellow"].setEnter(self._on_normal_yellow_enter)
        self.states["/on/normal/yellow"].setExit(self._on_normal_yellow_exit)
        
        # state /on/normal/history
        self.states["/on/normal/history"] = ShallowHistoryState(6, "/on/normal/history", self)
        
        # state /on/interrupted
        self.states["/on/interrupted"] = State(7, "/on/interrupted", self)
        self.states["/on/interrupted"].setEnter(self._on_interrupted_enter)
        self.states["/on/interrupted"].setExit(self._on_interrupted_exit)
        
        # state /on/interrupted/yellow
        self.states["/on/interrupted/yellow"] = State(8, "/on/interrupted/yellow", self)
        self.states["/on/interrupted/yellow"].setEnter(self._on_interrupted_yellow_enter)
        self.states["/on/interrupted/yellow"].setExit(self._on_interrupted_yellow_exit)
        
        # state /on/interrupted/black
        self.states["/on/interrupted/black"] = State(9, "/on/interrupted/black", self)
        self.states["/on/interrupted/black"].setEnter(self._on_interrupted_black_enter)
        self.states["/on/interrupted/black"].setExit(self._on_interrupted_black_exit)
        
        # state /off
        self.states["/off"] = State(10, "/off", self)
        self.states["/off"].setEnter(self._off_enter)
        self.states["/off"].setExit(self._off_exit)
        
        # state /state_Debug
        self.states["/state_Debug"] = State(11, "/state_Debug", self)
        self.states["/state_Debug"].setEnter(self._state_Debug_enter)
        self.states["/state_Debug"].setExit(self._state_Debug_exit)
        
        # state /state_Final
        self.states["/state_Final"] = State(12, "/state_Final", self)
        self.states["/state_Final"].setEnter(self._state_Final_enter)
        
        # state /state_Help
        self.states["/state_Help"] = State(13, "/state_Help", self)
        self.states["/state_Help"].setEnter(self._state_Help_enter)
        self.states["/state_Help"].setExit(self._state_Help_exit)
        
        # debug events
        pauseEvent = Event("pause", self.getInPortName("input"))
        stopEvent = Event("stop", self.getInPortName("input"))
        continueEvent = Event("continue", self.getInPortName("input"))
        helpEvent = Event("help", self.getInPortName("input"))
        
        # debug transitions
        self.pauseTransitions = {}
        self.timedTransitions = {}
        self.eventTransitions = {}
        self.createdTransitions = {}
        self.stopTransitions = {}
        self.helpTransitions = {}
        self.timeBreakpointTransitions = {}
        self.genBreakpointTransitions = {}
        
        # add children
        self.states[""].addChild(self.states["/on"])
        self.states[""].addChild(self.states["/off"])
        self.states["/on"].addChild(self.states["/on/normal"])
        self.states["/on"].addChild(self.states["/on/interrupted"])
        self.states["/on/normal"].addChild(self.states["/on/normal/red"])
        self.states["/on/normal"].addChild(self.states["/on/normal/green"])
        self.states["/on/normal"].addChild(self.states["/on/normal/yellow"])
        self.states["/on/normal"].addChild(self.states["/on/normal/history"])
        self.states["/on/interrupted"].addChild(self.states["/on/interrupted/yellow"])
        self.states["/on/interrupted"].addChild(self.states["/on/interrupted/black"])
        self.states[""].addChild(self.states["/state_Debug"])
        self.states[""].addChild(self.states["/state_Final"])
        self.states[""].addChild(self.states["/state_Help"])
        self.states[""].fixTree()
        self.states[""].default_state = self.states["/on"]
        self.states["/on"].default_state = self.states["/on/normal"]
        self.states["/on/normal"].default_state = self.states["/on/normal/red"]
        self.states["/on/interrupted"].default_state = self.states["/on/interrupted/yellow"]
        
        # transition /on/normal/red
        self.eventTransitions["/on/normal/red"] = []
        self.timedTransitions["/on/normal/red"] = []
        self.createdTransitions["/on/normal/red"] = []
        self.timeBreakpointTransitions["/on/normal/red"] = []
        self.genBreakpointTransitions["/on/normal/red"] = []
        _on_normal_red_0 = Transition(self, self.states["/on/normal/red"], [self.states["/on/normal/green"]])
        _on_normal_red_0.setTrigger(Event("_0after"))
        self.states["/on/normal/red"].addTransition(_on_normal_red_0)
        self.timedTransitions["/on/normal/red"].append(_on_normal_red_0)
        
        # transition /on/normal/green
        self.eventTransitions["/on/normal/green"] = []
        self.timedTransitions["/on/normal/green"] = []
        self.createdTransitions["/on/normal/green"] = []
        self.timeBreakpointTransitions["/on/normal/green"] = []
        self.genBreakpointTransitions["/on/normal/green"] = []
        _on_normal_green_0 = Transition(self, self.states["/on/normal/green"], [self.states["/on/normal/yellow"]])
        _on_normal_green_0.setTrigger(Event("_1after"))
        self.states["/on/normal/green"].addTransition(_on_normal_green_0)
        self.timedTransitions["/on/normal/green"].append(_on_normal_green_0)
        
        # transition /on/normal/yellow
        self.eventTransitions["/on/normal/yellow"] = []
        self.timedTransitions["/on/normal/yellow"] = []
        self.createdTransitions["/on/normal/yellow"] = []
        self.timeBreakpointTransitions["/on/normal/yellow"] = []
        self.genBreakpointTransitions["/on/normal/yellow"] = []
        _on_normal_yellow_0 = Transition(self, self.states["/on/normal/yellow"], [self.states["/on/normal/red"]])
        _on_normal_yellow_0.setTrigger(Event("_2after"))
        self.states["/on/normal/yellow"].addTransition(_on_normal_yellow_0)
        self.timedTransitions["/on/normal/yellow"].append(_on_normal_yellow_0)
        
        # transition /on/interrupted/yellow
        self.eventTransitions["/on/interrupted/yellow"] = []
        self.timedTransitions["/on/interrupted/yellow"] = []
        self.createdTransitions["/on/interrupted/yellow"] = []
        self.timeBreakpointTransitions["/on/interrupted/yellow"] = []
        self.genBreakpointTransitions["/on/interrupted/yellow"] = []
        _on_interrupted_yellow_0 = Transition(self, self.states["/on/interrupted/yellow"], [self.states["/on/interrupted/black"]])
        _on_interrupted_yellow_0.setTrigger(Event("_3after"))
        self.states["/on/interrupted/yellow"].addTransition(_on_interrupted_yellow_0)
        self.timedTransitions["/on/interrupted/yellow"].append(_on_interrupted_yellow_0)
        
        # transition /on/interrupted/black
        self.eventTransitions["/on/interrupted/black"] = []
        self.timedTransitions["/on/interrupted/black"] = []
        self.createdTransitions["/on/interrupted/black"] = []
        self.timeBreakpointTransitions["/on/interrupted/black"] = []
        self.genBreakpointTransitions["/on/interrupted/black"] = []
        _on_interrupted_black_0 = Transition(self, self.states["/on/interrupted/black"], [self.states["/on/interrupted/yellow"]])
        _on_interrupted_black_0.setTrigger(Event("_4after"))
        self.states["/on/interrupted/black"].addTransition(_on_interrupted_black_0)
        self.timedTransitions["/on/interrupted/black"].append(_on_interrupted_black_0)
        
        # transition /off
        self.eventTransitions["/off"] = []
        self.timedTransitions["/off"] = []
        self.createdTransitions["/off"] = []
        self.timeBreakpointTransitions["/off"] = []
        self.genBreakpointTransitions["/off"] = []
        
        # transition /on
        self.eventTransitions["/on"] = []
        self.timedTransitions["/on"] = []
        self.createdTransitions["/on"] = []
        self.timeBreakpointTransitions["/on"] = []
        self.genBreakpointTransitions["/on"] = []
        _on_0 = Transition(self, self.states["/on"], [self.states["/off"]])
        _on_0.setTrigger(Event("quit", self.getInPortName("input")))
        self.states["/on"].addTransition(_on_0)
        self.eventTransitions["/on"].append(_on_0)
        
        # transition /on/normal
        self.eventTransitions["/on/normal"] = []
        self.timedTransitions["/on/normal"] = []
        self.createdTransitions["/on/normal"] = []
        self.timeBreakpointTransitions["/on/normal"] = []
        self.genBreakpointTransitions["/on/normal"] = []
        _on_normal_0 = Transition(self, self.states["/on/normal"], [self.states["/on/interrupted"]])
        _on_normal_0.setTrigger(Event("police_interrupt", self.getInPortName("input")))
        self.states["/on/normal"].addTransition(_on_normal_0)
        self.eventTransitions["/on/normal"].append(_on_normal_0)
        
        # transition /on/interrupted
        self.eventTransitions["/on/interrupted"] = []
        self.timedTransitions["/on/interrupted"] = []
        self.createdTransitions["/on/interrupted"] = []
        self.timeBreakpointTransitions["/on/interrupted"] = []
        self.genBreakpointTransitions["/on/interrupted"] = []
        _on_interrupted_0 = Transition(self, self.states["/on/interrupted"], [self.states["/on/normal/history"]])
        _on_interrupted_0.setTrigger(Event("police_interrupt", self.getInPortName("input")))
        self.states["/on/interrupted"].addTransition(_on_interrupted_0)
        self.eventTransitions["/on/interrupted"].append(_on_interrupted_0)
        
        # transitions /state_Debug
        # /state_Debug to /state_Help
        state_Debug_to_state_Help = Transition(self, self.states["/state_Debug"], [self.states["/state_Help"]])
        state_Debug_to_state_Help.setTrigger(helpEvent)
        self.states["/state_Debug"].addTransition(state_Debug_to_state_Help)
        
        # /state_Help to /state_Debug
        state_Help_to_state_Debug = Transition(self, self.states["/state_Help"], [self.states["/state_Debug"]])
        state_Help_to_state_Debug.setTrigger(Event("_6after"))
        state_Help_to_state_Debug.setGuard(self.continueGuard_state_Debug)
        self.states["/state_Help"].addTransition(state_Help_to_state_Debug)
        # _on to /state_Debug
        _on_to_state_Debug = Transition(self, self.states["/on"], [self.states["/state_Debug"]])
        _on_to_state_Debug.setTrigger(pauseEvent)
        self.states["/on"].addTransition(_on_to_state_Debug)
        self.pauseTransitions["/on"] = _on_to_state_Debug
        
        # on from /state_Debug
        _state_Debug_to_on = Transition(self, self.states["/state_Debug"], [self.states["/on"]])
        _state_Debug_to_on.setTrigger(continueEvent)
        _state_Debug_to_on.setGuard(self.continueGuard_on)
        self.states["/state_Debug"].addTransition(_state_Debug_to_on)
        
        # _on to /state_Help
        _on_to_state_Help = Transition(self, self.states["/on"], [self.states["/state_Help"]])
        _on_to_state_Help.setTrigger(helpEvent)
        self.states["/on"].addTransition(_on_to_state_Help)
        self.helpTransitions["/on"] = _on_to_state_Help
        
        # on from /state_Help
        _state_Help_to_on = Transition(self, self.states["/state_Help"], [self.states["/on"]])
        _state_Help_to_on.setTrigger(Event("_6after"))
        _state_Help_to_on.setGuard(self.continueGuard_on)
        self.states["/state_Help"].addTransition(_state_Help_to_on)
        
        # _on to /state_Final
        _on_to_state_Final = Transition(self, self.states["/on"], [self.states["/state_Final"]])
        _on_to_state_Final.setTrigger(stopEvent)
        self.states["/on"].addTransition(_on_to_state_Final)
        self.stopTransitions["/on"] = _on_to_state_Final
        
        # _on_normal to /state_Debug
        _on_normal_to_state_Debug = Transition(self, self.states["/on/normal"], [self.states["/state_Debug"]])
        _on_normal_to_state_Debug.setTrigger(pauseEvent)
        self.states["/on/normal"].addTransition(_on_normal_to_state_Debug)
        self.pauseTransitions["/on/normal"] = _on_normal_to_state_Debug
        
        # on_normal from /state_Debug
        _state_Debug_to_on_normal = Transition(self, self.states["/state_Debug"], [self.states["/on/normal"]])
        _state_Debug_to_on_normal.setTrigger(continueEvent)
        _state_Debug_to_on_normal.setGuard(self.continueGuard_on_normal)
        self.states["/state_Debug"].addTransition(_state_Debug_to_on_normal)
        
        # _on_normal to /state_Help
        _on_normal_to_state_Help = Transition(self, self.states["/on/normal"], [self.states["/state_Help"]])
        _on_normal_to_state_Help.setTrigger(helpEvent)
        self.states["/on/normal"].addTransition(_on_normal_to_state_Help)
        self.helpTransitions["/on/normal"] = _on_normal_to_state_Help
        
        # on_normal from /state_Help
        _state_Help_to_on_normal = Transition(self, self.states["/state_Help"], [self.states["/on/normal"]])
        _state_Help_to_on_normal.setTrigger(Event("_6after"))
        _state_Help_to_on_normal.setGuard(self.continueGuard_on_normal)
        self.states["/state_Help"].addTransition(_state_Help_to_on_normal)
        
        # _on_normal to /state_Final
        _on_normal_to_state_Final = Transition(self, self.states["/on/normal"], [self.states["/state_Final"]])
        _on_normal_to_state_Final.setTrigger(stopEvent)
        self.states["/on/normal"].addTransition(_on_normal_to_state_Final)
        self.stopTransitions["/on/normal"] = _on_normal_to_state_Final
        
        # _on_normal_red to /state_Debug
        _on_normal_red_to_state_Debug = Transition(self, self.states["/on/normal/red"], [self.states["/state_Debug"]])
        _on_normal_red_to_state_Debug.setTrigger(pauseEvent)
        self.states["/on/normal/red"].addTransition(_on_normal_red_to_state_Debug)
        self.pauseTransitions["/on/normal/red"] = _on_normal_red_to_state_Debug
        
        # on_normal_red from /state_Debug
        _state_Debug_to_on_normal_red = Transition(self, self.states["/state_Debug"], [self.states["/on/normal/red"]])
        _state_Debug_to_on_normal_red.setTrigger(continueEvent)
        _state_Debug_to_on_normal_red.setGuard(self.continueGuard_on_normal_red)
        self.states["/state_Debug"].addTransition(_state_Debug_to_on_normal_red)
        
        # _on_normal_red to /state_Help
        _on_normal_red_to_state_Help = Transition(self, self.states["/on/normal/red"], [self.states["/state_Help"]])
        _on_normal_red_to_state_Help.setTrigger(helpEvent)
        self.states["/on/normal/red"].addTransition(_on_normal_red_to_state_Help)
        self.helpTransitions["/on/normal/red"] = _on_normal_red_to_state_Help
        
        # on_normal_red from /state_Help
        _state_Help_to_on_normal_red = Transition(self, self.states["/state_Help"], [self.states["/on/normal/red"]])
        _state_Help_to_on_normal_red.setTrigger(Event("_6after"))
        _state_Help_to_on_normal_red.setGuard(self.continueGuard_on_normal_red)
        self.states["/state_Help"].addTransition(_state_Help_to_on_normal_red)
        
        # _on_normal_red to /state_Final
        _on_normal_red_to_state_Final = Transition(self, self.states["/on/normal/red"], [self.states["/state_Final"]])
        _on_normal_red_to_state_Final.setTrigger(stopEvent)
        self.states["/on/normal/red"].addTransition(_on_normal_red_to_state_Final)
        self.stopTransitions["/on/normal/red"] = _on_normal_red_to_state_Final
        
        # _on_normal_green to /state_Debug
        _on_normal_green_to_state_Debug = Transition(self, self.states["/on/normal/green"], [self.states["/state_Debug"]])
        _on_normal_green_to_state_Debug.setTrigger(pauseEvent)
        self.states["/on/normal/green"].addTransition(_on_normal_green_to_state_Debug)
        self.pauseTransitions["/on/normal/green"] = _on_normal_green_to_state_Debug
        
        # on_normal_green from /state_Debug
        _state_Debug_to_on_normal_green = Transition(self, self.states["/state_Debug"], [self.states["/on/normal/green"]])
        _state_Debug_to_on_normal_green.setTrigger(continueEvent)
        _state_Debug_to_on_normal_green.setGuard(self.continueGuard_on_normal_green)
        self.states["/state_Debug"].addTransition(_state_Debug_to_on_normal_green)
        
        # _on_normal_green to /state_Help
        _on_normal_green_to_state_Help = Transition(self, self.states["/on/normal/green"], [self.states["/state_Help"]])
        _on_normal_green_to_state_Help.setTrigger(helpEvent)
        self.states["/on/normal/green"].addTransition(_on_normal_green_to_state_Help)
        self.helpTransitions["/on/normal/green"] = _on_normal_green_to_state_Help
        
        # on_normal_green from /state_Help
        _state_Help_to_on_normal_green = Transition(self, self.states["/state_Help"], [self.states["/on/normal/green"]])
        _state_Help_to_on_normal_green.setTrigger(Event("_6after"))
        _state_Help_to_on_normal_green.setGuard(self.continueGuard_on_normal_green)
        self.states["/state_Help"].addTransition(_state_Help_to_on_normal_green)
        
        # _on_normal_green to /state_Final
        _on_normal_green_to_state_Final = Transition(self, self.states["/on/normal/green"], [self.states["/state_Final"]])
        _on_normal_green_to_state_Final.setTrigger(stopEvent)
        self.states["/on/normal/green"].addTransition(_on_normal_green_to_state_Final)
        self.stopTransitions["/on/normal/green"] = _on_normal_green_to_state_Final
        
        # _on_normal_yellow to /state_Debug
        _on_normal_yellow_to_state_Debug = Transition(self, self.states["/on/normal/yellow"], [self.states["/state_Debug"]])
        _on_normal_yellow_to_state_Debug.setTrigger(pauseEvent)
        self.states["/on/normal/yellow"].addTransition(_on_normal_yellow_to_state_Debug)
        self.pauseTransitions["/on/normal/yellow"] = _on_normal_yellow_to_state_Debug
        
        # on_normal_yellow from /state_Debug
        _state_Debug_to_on_normal_yellow = Transition(self, self.states["/state_Debug"], [self.states["/on/normal/yellow"]])
        _state_Debug_to_on_normal_yellow.setTrigger(continueEvent)
        _state_Debug_to_on_normal_yellow.setGuard(self.continueGuard_on_normal_yellow)
        self.states["/state_Debug"].addTransition(_state_Debug_to_on_normal_yellow)
        
        # _on_normal_yellow to /state_Help
        _on_normal_yellow_to_state_Help = Transition(self, self.states["/on/normal/yellow"], [self.states["/state_Help"]])
        _on_normal_yellow_to_state_Help.setTrigger(helpEvent)
        self.states["/on/normal/yellow"].addTransition(_on_normal_yellow_to_state_Help)
        self.helpTransitions["/on/normal/yellow"] = _on_normal_yellow_to_state_Help
        
        # on_normal_yellow from /state_Help
        _state_Help_to_on_normal_yellow = Transition(self, self.states["/state_Help"], [self.states["/on/normal/yellow"]])
        _state_Help_to_on_normal_yellow.setTrigger(Event("_6after"))
        _state_Help_to_on_normal_yellow.setGuard(self.continueGuard_on_normal_yellow)
        self.states["/state_Help"].addTransition(_state_Help_to_on_normal_yellow)
        
        # _on_normal_yellow to /state_Final
        _on_normal_yellow_to_state_Final = Transition(self, self.states["/on/normal/yellow"], [self.states["/state_Final"]])
        _on_normal_yellow_to_state_Final.setTrigger(stopEvent)
        self.states["/on/normal/yellow"].addTransition(_on_normal_yellow_to_state_Final)
        self.stopTransitions["/on/normal/yellow"] = _on_normal_yellow_to_state_Final
        
        # _on_normal_history to /state_Debug
        _on_normal_history_to_state_Debug = Transition(self, self.states["/on/normal/history"], [self.states["/state_Debug"]])
        _on_normal_history_to_state_Debug.setTrigger(pauseEvent)
        self.states["/on/normal/history"].addTransition(_on_normal_history_to_state_Debug)
        self.pauseTransitions["/on/normal/history"] = _on_normal_history_to_state_Debug
        
        # on_normal_history from /state_Debug
        _state_Debug_to_on_normal_history = Transition(self, self.states["/state_Debug"], [self.states["/on/normal/history"]])
        _state_Debug_to_on_normal_history.setTrigger(continueEvent)
        _state_Debug_to_on_normal_history.setGuard(self.continueGuard_on_normal_history)
        self.states["/state_Debug"].addTransition(_state_Debug_to_on_normal_history)
        
        # _on_normal_history to /state_Help
        _on_normal_history_to_state_Help = Transition(self, self.states["/on/normal/history"], [self.states["/state_Help"]])
        _on_normal_history_to_state_Help.setTrigger(helpEvent)
        self.states["/on/normal/history"].addTransition(_on_normal_history_to_state_Help)
        self.helpTransitions["/on/normal/history"] = _on_normal_history_to_state_Help
        
        # on_normal_history from /state_Help
        _state_Help_to_on_normal_history = Transition(self, self.states["/state_Help"], [self.states["/on/normal/history"]])
        _state_Help_to_on_normal_history.setTrigger(Event("_6after"))
        _state_Help_to_on_normal_history.setGuard(self.continueGuard_on_normal_history)
        self.states["/state_Help"].addTransition(_state_Help_to_on_normal_history)
        
        # _on_normal_history to /state_Final
        _on_normal_history_to_state_Final = Transition(self, self.states["/on/normal/history"], [self.states["/state_Final"]])
        _on_normal_history_to_state_Final.setTrigger(stopEvent)
        self.states["/on/normal/history"].addTransition(_on_normal_history_to_state_Final)
        self.stopTransitions["/on/normal/history"] = _on_normal_history_to_state_Final
        
        # _on_interrupted to /state_Debug
        _on_interrupted_to_state_Debug = Transition(self, self.states["/on/interrupted"], [self.states["/state_Debug"]])
        _on_interrupted_to_state_Debug.setTrigger(pauseEvent)
        self.states["/on/interrupted"].addTransition(_on_interrupted_to_state_Debug)
        self.pauseTransitions["/on/interrupted"] = _on_interrupted_to_state_Debug
        
        # on_interrupted from /state_Debug
        _state_Debug_to_on_interrupted = Transition(self, self.states["/state_Debug"], [self.states["/on/interrupted"]])
        _state_Debug_to_on_interrupted.setTrigger(continueEvent)
        _state_Debug_to_on_interrupted.setGuard(self.continueGuard_on_interrupted)
        self.states["/state_Debug"].addTransition(_state_Debug_to_on_interrupted)
        
        # _on_interrupted to /state_Help
        _on_interrupted_to_state_Help = Transition(self, self.states["/on/interrupted"], [self.states["/state_Help"]])
        _on_interrupted_to_state_Help.setTrigger(helpEvent)
        self.states["/on/interrupted"].addTransition(_on_interrupted_to_state_Help)
        self.helpTransitions["/on/interrupted"] = _on_interrupted_to_state_Help
        
        # on_interrupted from /state_Help
        _state_Help_to_on_interrupted = Transition(self, self.states["/state_Help"], [self.states["/on/interrupted"]])
        _state_Help_to_on_interrupted.setTrigger(Event("_6after"))
        _state_Help_to_on_interrupted.setGuard(self.continueGuard_on_interrupted)
        self.states["/state_Help"].addTransition(_state_Help_to_on_interrupted)
        
        # _on_interrupted to /state_Final
        _on_interrupted_to_state_Final = Transition(self, self.states["/on/interrupted"], [self.states["/state_Final"]])
        _on_interrupted_to_state_Final.setTrigger(stopEvent)
        self.states["/on/interrupted"].addTransition(_on_interrupted_to_state_Final)
        self.stopTransitions["/on/interrupted"] = _on_interrupted_to_state_Final
        
        # _on_interrupted_yellow to /state_Debug
        _on_interrupted_yellow_to_state_Debug = Transition(self, self.states["/on/interrupted/yellow"], [self.states["/state_Debug"]])
        _on_interrupted_yellow_to_state_Debug.setTrigger(pauseEvent)
        self.states["/on/interrupted/yellow"].addTransition(_on_interrupted_yellow_to_state_Debug)
        self.pauseTransitions["/on/interrupted/yellow"] = _on_interrupted_yellow_to_state_Debug
        
        # on_interrupted_yellow from /state_Debug
        _state_Debug_to_on_interrupted_yellow = Transition(self, self.states["/state_Debug"], [self.states["/on/interrupted/yellow"]])
        _state_Debug_to_on_interrupted_yellow.setTrigger(continueEvent)
        _state_Debug_to_on_interrupted_yellow.setGuard(self.continueGuard_on_interrupted_yellow)
        self.states["/state_Debug"].addTransition(_state_Debug_to_on_interrupted_yellow)
        
        # _on_interrupted_yellow to /state_Help
        _on_interrupted_yellow_to_state_Help = Transition(self, self.states["/on/interrupted/yellow"], [self.states["/state_Help"]])
        _on_interrupted_yellow_to_state_Help.setTrigger(helpEvent)
        self.states["/on/interrupted/yellow"].addTransition(_on_interrupted_yellow_to_state_Help)
        self.helpTransitions["/on/interrupted/yellow"] = _on_interrupted_yellow_to_state_Help
        
        # on_interrupted_yellow from /state_Help
        _state_Help_to_on_interrupted_yellow = Transition(self, self.states["/state_Help"], [self.states["/on/interrupted/yellow"]])
        _state_Help_to_on_interrupted_yellow.setTrigger(Event("_6after"))
        _state_Help_to_on_interrupted_yellow.setGuard(self.continueGuard_on_interrupted_yellow)
        self.states["/state_Help"].addTransition(_state_Help_to_on_interrupted_yellow)
        
        # _on_interrupted_yellow to /state_Final
        _on_interrupted_yellow_to_state_Final = Transition(self, self.states["/on/interrupted/yellow"], [self.states["/state_Final"]])
        _on_interrupted_yellow_to_state_Final.setTrigger(stopEvent)
        self.states["/on/interrupted/yellow"].addTransition(_on_interrupted_yellow_to_state_Final)
        self.stopTransitions["/on/interrupted/yellow"] = _on_interrupted_yellow_to_state_Final
        
        # _on_interrupted_black to /state_Debug
        _on_interrupted_black_to_state_Debug = Transition(self, self.states["/on/interrupted/black"], [self.states["/state_Debug"]])
        _on_interrupted_black_to_state_Debug.setTrigger(pauseEvent)
        self.states["/on/interrupted/black"].addTransition(_on_interrupted_black_to_state_Debug)
        self.pauseTransitions["/on/interrupted/black"] = _on_interrupted_black_to_state_Debug
        
        # on_interrupted_black from /state_Debug
        _state_Debug_to_on_interrupted_black = Transition(self, self.states["/state_Debug"], [self.states["/on/interrupted/black"]])
        _state_Debug_to_on_interrupted_black.setTrigger(continueEvent)
        _state_Debug_to_on_interrupted_black.setGuard(self.continueGuard_on_interrupted_black)
        self.states["/state_Debug"].addTransition(_state_Debug_to_on_interrupted_black)
        
        # _on_interrupted_black to /state_Help
        _on_interrupted_black_to_state_Help = Transition(self, self.states["/on/interrupted/black"], [self.states["/state_Help"]])
        _on_interrupted_black_to_state_Help.setTrigger(helpEvent)
        self.states["/on/interrupted/black"].addTransition(_on_interrupted_black_to_state_Help)
        self.helpTransitions["/on/interrupted/black"] = _on_interrupted_black_to_state_Help
        
        # on_interrupted_black from /state_Help
        _state_Help_to_on_interrupted_black = Transition(self, self.states["/state_Help"], [self.states["/on/interrupted/black"]])
        _state_Help_to_on_interrupted_black.setTrigger(Event("_6after"))
        _state_Help_to_on_interrupted_black.setGuard(self.continueGuard_on_interrupted_black)
        self.states["/state_Help"].addTransition(_state_Help_to_on_interrupted_black)
        
        # _on_interrupted_black to /state_Final
        _on_interrupted_black_to_state_Final = Transition(self, self.states["/on/interrupted/black"], [self.states["/state_Final"]])
        _on_interrupted_black_to_state_Final.setTrigger(stopEvent)
        self.states["/on/interrupted/black"].addTransition(_on_interrupted_black_to_state_Final)
        self.stopTransitions["/on/interrupted/black"] = _on_interrupted_black_to_state_Final
        
        # _off to /state_Debug
        _off_to_state_Debug = Transition(self, self.states["/off"], [self.states["/state_Debug"]])
        _off_to_state_Debug.setTrigger(pauseEvent)
        self.states["/off"].addTransition(_off_to_state_Debug)
        self.pauseTransitions["/off"] = _off_to_state_Debug
        
        # off from /state_Debug
        _state_Debug_to_off = Transition(self, self.states["/state_Debug"], [self.states["/off"]])
        _state_Debug_to_off.setTrigger(continueEvent)
        _state_Debug_to_off.setGuard(self.continueGuard_off)
        self.states["/state_Debug"].addTransition(_state_Debug_to_off)
        
        # _off to /state_Help
        _off_to_state_Help = Transition(self, self.states["/off"], [self.states["/state_Help"]])
        _off_to_state_Help.setTrigger(helpEvent)
        self.states["/off"].addTransition(_off_to_state_Help)
        self.helpTransitions["/off"] = _off_to_state_Help
        
        # off from /state_Help
        _state_Help_to_off = Transition(self, self.states["/state_Help"], [self.states["/off"]])
        _state_Help_to_off.setTrigger(Event("_6after"))
        _state_Help_to_off.setGuard(self.continueGuard_off)
        self.states["/state_Help"].addTransition(_state_Help_to_off)
        
        # _off to /state_Final
        _off_to_state_Final = Transition(self, self.states["/off"], [self.states["/state_Final"]])
        _off_to_state_Final.setTrigger(stopEvent)
        self.states["/off"].addTransition(_off_to_state_Final)
        self.stopTransitions["/off"] = _off_to_state_Final
        
    
    def _on_enter(self):
        self.current_state = self.states["/on"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            
            self.print_internal_state("/on")
            event = "entry: /on"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/on")
            
        else:
            event = "re-entry: /on"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _on_exit(self):
        index = 7
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        found = False
        for b in self.timeBreakpointTransitions["/on"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/on"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/on"].enabled_event == None) and (not found)) and (self.helpTransitions["/on"].enabled_event == None):
            self.firstTime = True
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/on"])
        allTransitions.extend(self.eventTransitions["/on"])
        allTransitions.extend(self.timeBreakpointTransitions["/on"])
        allTransitions.extend(self.genBreakpointTransitions["/on"])
        allTransitions.extend(self.createdTransitions["/on"])
        allTransitions.append(self.stopTransitions["/on"])
        allTransitions.append(self.pauseTransitions["/on"])
        allTransitions.append(self.helpTransitions["/on"])
        event = "exit: /on"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["light_color", self.light_color])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _on_normal_enter(self):
        self.current_state = self.states["/on/normal"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            
            self.print_internal_state("/on/normal")
            event = "entry: /on/normal"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/on/normal")
            
        else:
            event = "re-entry: /on/normal"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _on_normal_exit(self):
        index = 7
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        found = False
        for b in self.timeBreakpointTransitions["/on/normal"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/on/normal"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/on/normal"].enabled_event == None) and (not found)) and (self.helpTransitions["/on/normal"].enabled_event == None):
            self.firstTime = True
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/on/normal"])
        allTransitions.extend(self.eventTransitions["/on/normal"])
        allTransitions.extend(self.timeBreakpointTransitions["/on/normal"])
        allTransitions.extend(self.genBreakpointTransitions["/on/normal"])
        allTransitions.extend(self.createdTransitions["/on/normal"])
        allTransitions.append(self.stopTransitions["/on/normal"])
        allTransitions.append(self.pauseTransitions["/on/normal"])
        allTransitions.append(self.helpTransitions["/on/normal"])
        event = "exit: /on/normal"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["light_color", self.light_color])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _on_interrupted_enter(self):
        self.current_state = self.states["/on/interrupted"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            
            self.print_internal_state("/on/interrupted")
            event = "entry: /on/interrupted"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/on/interrupted")
            
        else:
            event = "re-entry: /on/interrupted"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _on_interrupted_exit(self):
        index = 7
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        found = False
        for b in self.timeBreakpointTransitions["/on/interrupted"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/on/interrupted"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/on/interrupted"].enabled_event == None) and (not found)) and (self.helpTransitions["/on/interrupted"].enabled_event == None):
            self.firstTime = True
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/on/interrupted"])
        allTransitions.extend(self.eventTransitions["/on/interrupted"])
        allTransitions.extend(self.timeBreakpointTransitions["/on/interrupted"])
        allTransitions.extend(self.genBreakpointTransitions["/on/interrupted"])
        allTransitions.extend(self.createdTransitions["/on/interrupted"])
        allTransitions.append(self.stopTransitions["/on/interrupted"])
        allTransitions.append(self.pauseTransitions["/on/interrupted"])
        allTransitions.append(self.helpTransitions["/on/interrupted"])
        event = "exit: /on/interrupted"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["light_color", self.light_color])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _on_normal_red_enter(self):
        self.current_state = self.states["/on/normal/red"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            self.setRed();
            
            self.print_internal_state("/on/normal/red")
            event = "entry: /on/normal/red"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
            timers = []
            if self.scaleFactor != float("inf"):
                self.addTimer(0, 3 / self.scaleFactor)
                timers.append(3)
                print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
                self.process_time_transitions(timers, "/on/normal/red")
            else:
                self.addTimer(0, 3.0 / self.scaleFactor)
            self.process_event_transitions("/on/normal/red")
            
            self.print_prompt()
        else:
            self.addTimer(0, 3.0 - ((self.localExecutionTime / 1000.0) / self.scaleFactor))
            event = "re-entry: /on/normal/red"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _on_normal_red_exit(self):
        self.removeTimer(0)
        index = 7
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/on/normal/red"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/on/normal/red"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/on/normal/red"].enabled_event == None) and (not found)) and (self.helpTransitions["/on/normal/red"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/on/normal/red"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/on/normal/red"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/on/normal/red"])
        allTransitions.extend(self.eventTransitions["/on/normal/red"])
        allTransitions.extend(self.timeBreakpointTransitions["/on/normal/red"])
        allTransitions.extend(self.genBreakpointTransitions["/on/normal/red"])
        allTransitions.extend(self.createdTransitions["/on/normal/red"])
        allTransitions.append(self.stopTransitions["/on/normal/red"])
        allTransitions.append(self.pauseTransitions["/on/normal/red"])
        allTransitions.append(self.helpTransitions["/on/normal/red"])
        event = "exit: /on/normal/red"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["light_color", self.light_color])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _on_normal_green_enter(self):
        self.current_state = self.states["/on/normal/green"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            self.setGreen();
            
            self.print_internal_state("/on/normal/green")
            event = "entry: /on/normal/green"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
            timers = []
            if self.scaleFactor != float("inf"):
                self.addTimer(1, 2 / self.scaleFactor)
                timers.append(2)
                print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
                self.process_time_transitions(timers, "/on/normal/green")
            else:
                self.addTimer(1, 2.0 / self.scaleFactor)
            self.process_event_transitions("/on/normal/green")
            
            self.print_prompt()
        else:
            self.addTimer(1, 2.0 - ((self.localExecutionTime / 1000.0) / self.scaleFactor))
            event = "re-entry: /on/normal/green"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _on_normal_green_exit(self):
        self.removeTimer(1)
        index = 7
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/on/normal/green"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/on/normal/green"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/on/normal/green"].enabled_event == None) and (not found)) and (self.helpTransitions["/on/normal/green"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/on/normal/green"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/on/normal/green"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/on/normal/green"])
        allTransitions.extend(self.eventTransitions["/on/normal/green"])
        allTransitions.extend(self.timeBreakpointTransitions["/on/normal/green"])
        allTransitions.extend(self.genBreakpointTransitions["/on/normal/green"])
        allTransitions.extend(self.createdTransitions["/on/normal/green"])
        allTransitions.append(self.stopTransitions["/on/normal/green"])
        allTransitions.append(self.pauseTransitions["/on/normal/green"])
        allTransitions.append(self.helpTransitions["/on/normal/green"])
        event = "exit: /on/normal/green"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["light_color", self.light_color])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _on_normal_yellow_enter(self):
        self.current_state = self.states["/on/normal/yellow"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            self.setYellow();
            
            self.print_internal_state("/on/normal/yellow")
            event = "entry: /on/normal/yellow"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
            timers = []
            if self.scaleFactor != float("inf"):
                self.addTimer(2, 1 / self.scaleFactor)
                timers.append(1)
                print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
                self.process_time_transitions(timers, "/on/normal/yellow")
            else:
                self.addTimer(2, 1.0 / self.scaleFactor)
            self.process_event_transitions("/on/normal/yellow")
            
            self.print_prompt()
        else:
            self.addTimer(2, 1.0 - ((self.localExecutionTime / 1000.0) / self.scaleFactor))
            event = "re-entry: /on/normal/yellow"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _on_normal_yellow_exit(self):
        self.removeTimer(2)
        index = 7
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/on/normal/yellow"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/on/normal/yellow"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/on/normal/yellow"].enabled_event == None) and (not found)) and (self.helpTransitions["/on/normal/yellow"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/on/normal/yellow"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/on/normal/yellow"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/on/normal/yellow"])
        allTransitions.extend(self.eventTransitions["/on/normal/yellow"])
        allTransitions.extend(self.timeBreakpointTransitions["/on/normal/yellow"])
        allTransitions.extend(self.genBreakpointTransitions["/on/normal/yellow"])
        allTransitions.extend(self.createdTransitions["/on/normal/yellow"])
        allTransitions.append(self.stopTransitions["/on/normal/yellow"])
        allTransitions.append(self.pauseTransitions["/on/normal/yellow"])
        allTransitions.append(self.helpTransitions["/on/normal/yellow"])
        event = "exit: /on/normal/yellow"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["light_color", self.light_color])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _on_interrupted_yellow_enter(self):
        self.current_state = self.states["/on/interrupted/yellow"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            self.setYellow();
            
            self.print_internal_state("/on/interrupted/yellow")
            event = "entry: /on/interrupted/yellow"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
            timers = []
            if self.scaleFactor != float("inf"):
                self.addTimer(3, .5 / self.scaleFactor)
                timers.append(.5)
                print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
                self.process_time_transitions(timers, "/on/interrupted/yellow")
            else:
                self.addTimer(3, 0.5 / self.scaleFactor)
            self.process_event_transitions("/on/interrupted/yellow")
            
            self.print_prompt()
        else:
            self.addTimer(3, 0.5 - ((self.localExecutionTime / 1000.0) / self.scaleFactor))
            event = "re-entry: /on/interrupted/yellow"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _on_interrupted_yellow_exit(self):
        self.removeTimer(3)
        index = 7
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/on/interrupted/yellow"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/on/interrupted/yellow"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/on/interrupted/yellow"].enabled_event == None) and (not found)) and (self.helpTransitions["/on/interrupted/yellow"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/on/interrupted/yellow"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/on/interrupted/yellow"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/on/interrupted/yellow"])
        allTransitions.extend(self.eventTransitions["/on/interrupted/yellow"])
        allTransitions.extend(self.timeBreakpointTransitions["/on/interrupted/yellow"])
        allTransitions.extend(self.genBreakpointTransitions["/on/interrupted/yellow"])
        allTransitions.extend(self.createdTransitions["/on/interrupted/yellow"])
        allTransitions.append(self.stopTransitions["/on/interrupted/yellow"])
        allTransitions.append(self.pauseTransitions["/on/interrupted/yellow"])
        allTransitions.append(self.helpTransitions["/on/interrupted/yellow"])
        event = "exit: /on/interrupted/yellow"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["light_color", self.light_color])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _on_interrupted_black_enter(self):
        self.current_state = self.states["/on/interrupted/black"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            self.clear();
            
            self.print_internal_state("/on/interrupted/black")
            event = "entry: /on/interrupted/black"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
            timers = []
            if self.scaleFactor != float("inf"):
                self.addTimer(4, .5 / self.scaleFactor)
                timers.append(.5)
                print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
                self.process_time_transitions(timers, "/on/interrupted/black")
            else:
                self.addTimer(4, 0.5 / self.scaleFactor)
            self.process_event_transitions("/on/interrupted/black")
            
            self.print_prompt()
        else:
            self.addTimer(4, 0.5 - ((self.localExecutionTime / 1000.0) / self.scaleFactor))
            event = "re-entry: /on/interrupted/black"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _on_interrupted_black_exit(self):
        self.removeTimer(4)
        index = 7
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/on/interrupted/black"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/on/interrupted/black"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/on/interrupted/black"].enabled_event == None) and (not found)) and (self.helpTransitions["/on/interrupted/black"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/on/interrupted/black"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/on/interrupted/black"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/on/interrupted/black"])
        allTransitions.extend(self.eventTransitions["/on/interrupted/black"])
        allTransitions.extend(self.timeBreakpointTransitions["/on/interrupted/black"])
        allTransitions.extend(self.genBreakpointTransitions["/on/interrupted/black"])
        allTransitions.extend(self.createdTransitions["/on/interrupted/black"])
        allTransitions.append(self.stopTransitions["/on/interrupted/black"])
        allTransitions.append(self.pauseTransitions["/on/interrupted/black"])
        allTransitions.append(self.helpTransitions["/on/interrupted/black"])
        event = "exit: /on/interrupted/black"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["light_color", self.light_color])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _off_enter(self):
        self.current_state = self.states["/off"]
        self.debugging = False
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            self.clear();
            
            self.print_internal_state("/off")
            event = "entry: /off"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
            self.print_prompt()
        else:
            event = "re-entry: /off"
            allAttTuples = []
            allAttTuples.append(["light_color", self.light_color])
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            self.print_prompt()
    
    def _off_exit(self):
        index = 7
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/off"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/off"]:
            if b.enabled_event != None:
                found = True
        
        if ((self.pauseTransitions["/off"].enabled_event == None) and (not found)) and (self.helpTransitions["/off"].enabled_event == None):
            self.firstTime = True
            queue = self.active_states.queue
            if queue[0] == self.states["/off"]:
                self.active_states.get()
            else:
                index = 0
                iteration = 0
                for e in queue:
                    if self.states["/off"] == e:
                        index = iteration
                    iteration = (iteration + 1)
                del self.active_states.queue[index]
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/off"])
        allTransitions.extend(self.eventTransitions["/off"])
        allTransitions.extend(self.timeBreakpointTransitions["/off"])
        allTransitions.extend(self.genBreakpointTransitions["/off"])
        allTransitions.extend(self.createdTransitions["/off"])
        allTransitions.append(self.stopTransitions["/off"])
        allTransitions.append(self.pauseTransitions["/off"])
        allTransitions.append(self.helpTransitions["/off"])
        event = "exit: /off"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        allAttTuples.append(["light_color", self.light_color])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _state_Debug_enter(self):
        if self.firstTime:
            self.firstTime = False
        self.debugging = True
        targets = list(self.active_states.queue)
        states_names = [s.name for s in targets]
        
        print(colors.fg.lightred),
        print("DEBUG MODE")
        print("Current States: {}".format(states_names))
        print("light_color" + ": {}".format(self.light_color))
        print(colors.reset),
        print(colors.fg.lightgrey +"[/state_Debug] > "+colors.reset),
    
    def _state_Debug_exit(self):
        self.cumulativeDebugTime = (self.getSimulatedTime() - self.executionTime)
        targets = list(self.active_states.queue)
        for t in targets:
            self.pauseTransitions[t.name].enabled_event = None
    
    def _state_Final_enter(self):
        outputName = "executionTrace.txt"
        self.controller.stop()
        self.saveExecutionTrace(outputName)
        exit(1)
    
    def _state_Help_enter(self):
        if self.firstTime:
            self.firstTime = False
        print(colors.fg.yellow + "HELP - Available Commands:")
        print("1. " + colors.fg.orange +"pause" + colors.fg.yellow + " - Pauses the execution.")
        print("2. " + colors.fg.orange +"continue" + colors.fg.yellow + " - Continues the execution if it is paused.")
        print("3. " + colors.fg.orange +"step" + colors.fg.yellow + " - If there exists a time-based transition, this command will skip it.")
        print("4. " + colors.fg.orange +"stop" + colors.fg.yellow + " - Stops the execution completely and saves a trace with information about the simulation.")
        print("5. Possible "+ colors.fg.orange +"events"+ colors.fg.yellow + " to simulate are displayed at the arrival of each state if they are available.")
        print("6. To change the "+ colors.fg.orange + "Simulation Type"  + colors.fg.yellow +" and its " + colors.fg.orange +"Scale Factor" + colors.fg.yellow + ", use the flags " + colors.fg.orange + "-s" + colors.fg.yellow + " and " + colors.fg.orange + "-f" + colors.fg.yellow + ", respectively, when executing the generated file.")
        print("7. The " + colors.fg.orange +  "Simulation Type" + colors.fg.yellow + ", " + colors.fg.orange + "-s" + colors.fg.yellow + " may have the following values: " + colors.fg.orange + "0" + colors.fg.yellow + " = Real-Time Simulation; "+ colors.fg.orange + "1" + colors.fg.yellow + " = Scaled Real-Time Simulation; " + colors.fg.orange + "2" + colors.fg.yellow + " = As-fast-as-possible Simulation.")
        print("8. When using the Scaled Real-Time Simulation, a "+ colors.fg.orange + "Scale Factor" + colors.fg.yellow + ", " + colors.fg.orange + "-f" + colors.fg.yellow + " may be added. Its value may be any number > 0.")
        print("9. To add a " + colors.fg.orange + "breakpoint" + colors.fg.yellow + ", edit the " + colors.fg.orange + "breakpoints.xml" + colors.fg.yellow +" file directly." + colors.reset)
        self.addTimer(6, 0)
    
    
    def _state_Help_exit(self):
        self.removeTimer(6)
        targets = list(self.active_states.queue)
        for t in targets:
            self.helpTransitions[t.name].enabled_event = None
    
    def process_time_transitions(self, timers, state_name):
        iteration = 0
        chosen = None
        lowest = timers[0]
        for t in self.timedTransitions[state_name]:
            if lowest >= timers[iteration]:
                lowest = timers[iteration]
                chosen = t
            iteration = iteration + 1
        if iteration > 0:
            temp = Transition(self, chosen.source, chosen.targets)
            temp.setTrigger(Event("step", self.getInPortName("input")))
            temp.setAction(chosen.action)
            temp.setGuard(chosen.guard)
            if not self.listContains(self.createdTransitions[state_name], temp):
                self.createdTransitions[state_name].append(temp)
                chosen.source.addTransition(temp)
            attrs = [s.name for s in chosen.targets]
            print((colors.fg.lightgreen + "[time-based]" + colors.fg.lightgrey +" type " + colors.fg.pink +"step" + colors.fg.lightgrey + " to skip the transition to "+ colors.fg.cyan +"{}" + colors.fg.lightgrey +" which has a duration of " + colors.fg.pink + "{}" + colors.fg.lightgrey +" seconds and the guard condition " + colors.fg.pink + "{}" + colors.reset).format(attrs, lowest, chosen.guard))
    
    def process_event_transitions(self, state_name):
        possibleT = self.eventTransitions[state_name]
        for t in possibleT:
            attrs = [s.name for s in t.targets]
            print((colors.fg.lightgreen + "[event-based]"  + colors.fg.lightgrey +" type " + colors.fg.pink +"{}"+ colors.fg.lightgrey + " to perform the transition to "+ colors.fg.cyan + "{}" + colors.fg.lightgrey + " with the guard condition " + colors.fg.pink + "{}"+ colors.reset).format(t.trigger.name, attrs, t.guard))
    
    def print_internal_state(self, state_name):
        print("\n" + ((colors.fg.lightgrey + "Entered ") + (colors.fg.cyan + state_name)))
        print(colors.fg.cyan + "light_color" + (": {}" + colors.reset).format(self.light_color))
    
    def print_prompt(self):
        print(colors.fg.lightgrey +"["),
        size = len(self.active_states.queue)
        iteration = 0
        for s in list(self.active_states.queue):
            print(s.name),
            if iteration < (size - 1):
                print(", "),
            iteration = (iteration + 1)
        print("] > "+colors.reset),
    
    def saveExecutionTrace(self, outputName):
        currDir = os.getcwd()
        for entry in os.listdir(currDir):
            if os.path.isfile(os.path.join(currDir, entry)) and entry == outputName:
                outputName = outputName + "_1"
        
        simTime = "Total Simulation Time: " + str(float(self.getSimulatedTime())) + " ms (includes Debug Time)"
        exTime = "Execution Time: " + str(self.executionTime) + " ms"
        debugTime = "Total Debug Time: " + str(self.cumulativeDebugTime) + " ms"
        
        f = FileWriter(outputName)
        f.write("Execution Info")
        f.write("")
        f.write(simTime)
        f.write(exTime)
        f.write(debugTime)
        f.write("")
        f.write("Events")
        for ide, event in enumerate(self.tracedEvents):
            eventName = event.getEventName()
            timestamp = event.getTimestamp()
            attributeValues = ""
            for v in event.getAttributeValues():
                attributeValues += v[0] + ": " + str(v[1]) + "; "
            eventInfo = str(ide) + ". Timestamp: " + str(timestamp) +  "; Name: " + eventName + ";  Attributes: ["  + attributeValues + "]"
            # print(ide)
            # print(eventName)
            f.write(eventInfo)
        f.close() 
    
    def saveEvent(self, event_name, timestamp, attribute_values):
        self.tracedEvents.append(TracedEvent(event_name, timestamp, attribute_values))
    
    def listContains(self, transitions, newTransition):
        flag = False
        for t in transitions:
            if ((((t.source == newTransition.source) and (t.targets == newTransition.targets)) and (t.trigger.name == newTransition.trigger.name)) and (t.trigger.port == newTransition.trigger.port)) and (t.action == newTransition.action):
                flag = True
        return flag
    
    def continueGuard_state_Debug(self, parameters):
        return self.debugging
    
    def continueGuard_on(self, parameters):
        return list(self.active_states.queue) == list([self.states["/on"]])
    
    def continueGuard_on_normal(self, parameters):
        return list(self.active_states.queue) == list([self.states["/on/normal"]])
    
    def continueGuard_on_normal_red(self, parameters):
        return list(self.active_states.queue) == list([self.states["/on/normal/red"]])
    
    def continueGuard_on_normal_green(self, parameters):
        return list(self.active_states.queue) == list([self.states["/on/normal/green"]])
    
    def continueGuard_on_normal_yellow(self, parameters):
        return list(self.active_states.queue) == list([self.states["/on/normal/yellow"]])
    
    def continueGuard_on_normal_history(self, parameters):
        return list(self.active_states.queue) == list([self.states["/on/normal/history"]])
    
    def continueGuard_on_interrupted(self, parameters):
        return list(self.active_states.queue) == list([self.states["/on/interrupted"]])
    
    def continueGuard_on_interrupted_yellow(self, parameters):
        return list(self.active_states.queue) == list([self.states["/on/interrupted/yellow"]])
    
    def continueGuard_on_interrupted_black(self, parameters):
        return list(self.active_states.queue) == list([self.states["/on/interrupted/black"]])
    
    def continueGuard_off(self, parameters):
        return list(self.active_states.queue) == list([self.states["/off"]])
    
    def initializeStatechart(self):
        # enter default state
        print(colors.fg.yellow + "Type " + colors.fg.orange + "help" + colors.fg.yellow + " to see the available commands." + colors.reset)
        event = "start"
        allAttTuples = []
        allAttTuples.append(["light_color", self.light_color])
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
        self.default_targets = self.states["/on"].getEffectiveTargetStates()
        RuntimeClassBase.initializeStatechart(self)

class ObjectManager(ObjectManagerBase):
    def __init__(self, controller):
        ObjectManagerBase.__init__(self, controller)
    
    def instantiate(self, class_name, construct_params):
        if class_name == "MainApp":
            instance = MainApp(self.controller)
            instance.associations = {}
            instance.associations["trafficlight"] = Association("TrafficLight", 0, -1)
        elif class_name == "TrafficLight":
            instance = TrafficLight(self.controller)
            instance.associations = {}
        else:
            raise Exception("Cannot instantiate class " + class_name)
        return instance

class Controller(ThreadsControllerBase):
    def __init__(self, keep_running = None, behind_schedule_callback = None):
        if keep_running == None: keep_running = True
        if behind_schedule_callback == None: behind_schedule_callback = None
        ThreadsControllerBase.__init__(self, ObjectManager(self), keep_running, behind_schedule_callback)
        self.addInputPort("input")
        self.addOutputPort("output")
        self.object_manager.createInstance("MainApp", [])