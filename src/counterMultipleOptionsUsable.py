"""
Generated by Statechart compiler by Glenn De Jonghe, Joeri Exelmans, Simon Van Mierlo, and Yentl Van Tendeloo (for the inspiration)

Model author: Francisco Simoes
Model name:   Counter

"""

from python_sccd.python_sccd_runtime.statecharts_core import *
from sccd.runtime.statecharts_core import *
import argparse
from sccd.compiler.utils import FileWriter
import os

# package "Counter"

class MainApp(RuntimeClassBase):
    def __init__(self, controller):
        RuntimeClassBase.__init__(self, controller)
        
        self.semantics.big_step_maximality = StatechartSemantics.TakeMany
        self.semantics.internal_event_lifeline = StatechartSemantics.Queue
        self.semantics.input_event_lifeline = StatechartSemantics.FirstComboStep
        self.semantics.priority = StatechartSemantics.SourceParent
        self.semantics.concurrency = StatechartSemantics.Single
        
        # set execution speed
        #self.setSimulationSpeed()
        
        # build Statechart structure
        self.build_statechart_structure()
        
        # user defined attributes
        self.counter = 0
        
        # call user defined constructor
        MainApp.user_defined_constructor(self)
    
    def user_defined_constructor(self):
        pass
    
    def setSimulationSpeed(self):
        parser = argparse.ArgumentParser(prog="python -m sccd.compiler.sccdc")
        parser.add_argument('-s','--simType', help='Simulation type which has 3 different variations: 0 = default simulation, scale factor of 1; 1 = scaled real-time simulation, takes one extra arg to set the scale factor; 2 = as-fast-as-possible simulation, scale factor = infinity', default=0)
        parser.add_argument('-f','--factor', help='Scale factor: default value is 1; if the factor is 2, the simulation 2x faster', default=1)
        args = vars(parser.parse_args())
        
        if args['simType'] is not None:
            args['simType'] = float(args['simType'])
            args['factor'] = float(args['factor'])
            if args['simType'] == 0:
                print("Real-time Simulation")
                self.scaleFactor = 1.0
            elif args['simType'] == 1:
                print("Scaled Real-time Simulation")
                #self.scaleFactor = 1.0 #???
                if args['factor'] is not None and args['factor'] > 0:
                    self.scaleFactor = args['factor']
            elif args['simType'] == 2:
                print("As-fast-as-possible Simulation")
                self.scaleFactor = float('inf')
            else:
                print("Invalid simulation type. Defaulting to Real-time Simulation")
                self.scaleFactor = 1.0
            print("Scale Factor: {}".format(self.scaleFactor))
    
    def user_defined_destructor(self):
        pass
    
    
    # user defined method
    def increment_counter(self):
        self.counter = self.counter + 1
        print ("counter: ", self.counter)
    
    
    # builds Statechart structure
    def build_statechart_structure(self):
        
        # state <root>
        self.states[""] = State(0, "", self)
        
        # state /state_A
        self.states["/state_A"] = State(1, "/state_A", self)
        self.states["/state_A"].setEnter(self._state_A_enter)
        self.states["/state_A"].setExit(self._state_A_exit)
        
        # state /state_B
        self.states["/state_B"] = State(2, "/state_B", self)
        self.states["/state_B"].setEnter(self._state_B_enter)
        self.states["/state_B"].setExit(self._state_B_exit)
        
        # state /state_C
        self.states["/state_C"] = State(3, "/state_C", self)
        self.states["/state_C"].setEnter(self._state_C_enter)
        self.states["/state_C"].setExit(self._state_C_exit)
        
        # state /state_D
        self.states["/state_D"] = State(4, "/state_D", self)
        self.states["/state_D"].setEnter(self._state_D_enter)
        self.states["/state_D"].setExit(self._state_D_exit)
        
        # add children
        self.states[""].addChild(self.states["/state_A"])
        self.states[""].addChild(self.states["/state_B"])
        self.states[""].addChild(self.states["/state_C"])
        self.states[""].addChild(self.states["/state_D"])
        self.states[""].fixTree()
        self.states[""].default_state = self.states["/state_A"]
        
        # transition /state_A
        _state_A_0 = Transition(self, self.states["/state_A"], [self.states["/state_B"]])
        _state_A_0.setTrigger(Event("_0after"))
        self.states["/state_A"].addTransition(_state_A_0)
        _state_A_1 = Transition(self, self.states["/state_A"], [self.states["/state_C"]])
        _state_A_1.setTrigger(Event("_1after"))
        self.states["/state_A"].addTransition(_state_A_1)
        _state_A_2 = Transition(self, self.states["/state_A"], [self.states["/state_D"]])
        _state_A_2.setTrigger(Event("d", self.getInPortName("input")))
        self.states["/state_A"].addTransition(_state_A_2)
        
        # transition /state_B
        _state_B_0 = Transition(self, self.states["/state_B"], [self.states["/state_A"]])
        _state_B_0.setTrigger(Event("move", self.getInPortName("input")))
        self.states["/state_B"].addTransition(_state_B_0)
        
        # transition /state_C
        _state_C_0 = Transition(self, self.states["/state_C"], [self.states["/state_A"]])
        _state_C_0.setTrigger(Event("move", self.getInPortName("input")))
        self.states["/state_C"].addTransition(_state_C_0)
        
        # transition /state_D
        _state_D_0 = Transition(self, self.states["/state_D"], [self.states["/state_A"]])
        _state_D_0.setTrigger(Event("move", self.getInPortName("input")))
        self.states["/state_D"].addTransition(_state_D_0)
    
    def _state_A_enter(self):
        self.current_state = self.states["/state_A"]
        self.increment_counter();
        self.addTimer(0, 10)
        self.addTimer(1, 20)
    
    def _state_A_exit(self):
        self.removeTimer(0)
        self.removeTimer(1)
    
    def _state_B_enter(self):
        self.current_state = self.states["/state_B"]
        self.increment_counter();
    
    def _state_B_exit(self):
        pass
    
    def _state_C_enter(self):
        self.current_state = self.states["/state_C"]
        self.increment_counter();
    
    def _state_C_exit(self):
        pass
    
    def _state_D_enter(self):
        self.current_state = self.states["/state_D"]
        self.increment_counter();
    
    def _state_D_exit(self):
        pass
    
    def initializeStatechart(self):
        # enter default state
        self.default_targets = self.states["/state_A"].getEffectiveTargetStates()
        RuntimeClassBase.initializeStatechart(self)

class ObjectManager(ObjectManagerBase):
    def __init__(self, controller):
        ObjectManagerBase.__init__(self, controller)
    
    def instantiate(self, class_name, construct_params):
        if class_name == "MainApp":
            instance = MainApp(self.controller)
            instance.associations = {}
        else:
            raise Exception("Cannot instantiate class " + class_name)
        return instance

class Controller(ThreadsControllerBase):
    def __init__(self, keep_running = None, behind_schedule_callback = None):
        if keep_running == None: keep_running = True
        if behind_schedule_callback == None: behind_schedule_callback = None
        ThreadsControllerBase.__init__(self, ObjectManager(self), keep_running, behind_schedule_callback)
        self.addInputPort("input")
        self.addOutputPort("output")
        self.object_manager.createInstance("MainApp", [])