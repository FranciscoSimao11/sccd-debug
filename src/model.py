"""
Generated by Statechart compiler by Glenn De Jonghe, Joeri Exelmans, Simon Van Mierlo, and Yentl Van Tendeloo (for the inspiration)

Model author: Simon Van Mierlo
Model name:   Timer (Threaded Version)

"""

from python_sccd.python_sccd_runtime.statecharts_core import *
from sccd.runtime.statecharts_core import *
from colors import *
import argparse
from sccd.compiler.utils import FileWriter
import os

# package "Timer (Threaded Version)"

class MainApp(RuntimeClassBase):
    def __init__(self, controller):
        RuntimeClassBase.__init__(self, controller)
        
        self.semantics.big_step_maximality = StatechartSemantics.TakeMany
        self.semantics.internal_event_lifeline = StatechartSemantics.Queue
        self.semantics.input_event_lifeline = StatechartSemantics.FirstComboStep
        self.semantics.priority = StatechartSemantics.SourceParent
        self.semantics.concurrency = StatechartSemantics.Single
        
        self.firstTime = True
        self.didCalcs = Queue()
        self.active_states = Queue()
        self.startTime = 0.0
        self.executionTime = 0.0
        self.localExecutionTime = 0.0
        self.cumulativeDebugTime = 0.0
        self.tracedEvents = []
        self.expiredTimestamps = []
        
        # set execution speed
        self.setSimulationSpeed()
        
        # build Statechart structure
        self.build_statechart_structure()
        
        # call user defined constructor
        MainApp.user_defined_constructor(self)
    
    def user_defined_constructor(self):
        pass
    
    def setSimulationSpeed(self):
        
        parser = argparse.ArgumentParser(prog="python -m sccd.compiler.sccdc")
        parser.add_argument('-s','--simType', help='Simulation type which has 3 different variations: 0 = default simulation, scale factor of 1; 1 = scaled real-time simulation, takes one extra arg to set the scale factor; 2 = as-fast-as-possible simulation, scale factor = infinity', default=0)
        parser.add_argument('-f','--factor', help='Scale factor: default value is 1; if the factor is 2, the simulation 2x faster', default=1)
        args = vars(parser.parse_args())
        
        if args['simType'] is not None:
            args['simType'] = float(args['simType'])
            args['factor'] = float(args['factor'])
            self.scaleFactor = 1.0
            if args['simType'] == 0:
                print(colors.fg.yellow+"Real-time Simulation")
            elif args['simType'] == 1:
                print(colors.fg.yellow+"Scaled Real-time Simulation")
                if args['factor'] is not None and args['factor'] > 0:
                    self.scaleFactor = args['factor']
            elif args['simType'] == 2:
                print(colors.fg.yellow+"As-fast-as-possible Simulation")
                self.scaleFactor = float('inf')
            else:
                print(colors.fg.yellow+"Invalid simulation type. Defaulting to Real-time Simulation")
                self.scaleFactor = 1.0
            print(colors.fg.yellow+"Scale Factor: {}".format(self.scaleFactor)+colors.reset)
    
    def user_defined_destructor(self):
        pass
    
    
    # user defined method
    def print_simulated_time(self):
        print 'SIMTIME = %.2f' % self.getSimulatedTime()
    
    
    # user defined method
    def print_wct_time(self):
        print 'ACTTIME = %.2f' % self.getWallClockTime()
    
    
    # builds Statechart structure
    def build_statechart_structure(self):
        
        # state <root>
        self.states[""] = State(0, "", self)
        
        # state /running
        self.states["/running"] = ParallelState(1, "/running", self)
        self.states["/running"].setEnter(self._running_enter)
        self.states["/running"].setExit(self._running_exit)
        
        # state /running/print_simulated_time
        self.states["/running/print_simulated_time"] = State(2, "/running/print_simulated_time", self)
        self.states["/running/print_simulated_time"].setEnter(self._running_print_simulated_time_enter)
        self.states["/running/print_simulated_time"].setExit(self._running_print_simulated_time_exit)
        
        # state /running/print_simulated_time/print_simulated_time
        self.states["/running/print_simulated_time/print_simulated_time"] = State(3, "/running/print_simulated_time/print_simulated_time", self)
        self.states["/running/print_simulated_time/print_simulated_time"].setEnter(self._running_print_simulated_time_print_simulated_time_enter)
        self.states["/running/print_simulated_time/print_simulated_time"].setExit(self._running_print_simulated_time_print_simulated_time_exit)
        
        # state /running/print_wct_time
        self.states["/running/print_wct_time"] = State(4, "/running/print_wct_time", self)
        self.states["/running/print_wct_time"].setEnter(self._running_print_wct_time_enter)
        self.states["/running/print_wct_time"].setExit(self._running_print_wct_time_exit)
        
        # state /running/print_wct_time/print_wct_time
        self.states["/running/print_wct_time/print_wct_time"] = State(5, "/running/print_wct_time/print_wct_time", self)
        self.states["/running/print_wct_time/print_wct_time"].setEnter(self._running_print_wct_time_print_wct_time_enter)
        self.states["/running/print_wct_time/print_wct_time"].setExit(self._running_print_wct_time_print_wct_time_exit)
        
        # state /interrupted
        self.states["/interrupted"] = State(6, "/interrupted", self)
        self.states["/interrupted"].setEnter(self._interrupted_enter)
        self.states["/interrupted"].setExit(self._interrupted_exit)
        
        # state /state_Debug
        self.states["/state_Debug"] = State(7, "/state_Debug", self)
        self.states["/state_Debug"].setEnter(self._state_Debug_enter)
        self.states["/state_Debug"].setExit(self._state_Debug_exit)
        
        # state /state_Final
        self.states["/state_Final"] = State(8, "/state_Final", self)
        self.states["/state_Final"].setEnter(self._state_Final_enter)
        
        # debug events
        pauseEvent = Event("pause", self.getInPortName("input"))
        stopEvent = Event("stop", self.getInPortName("input"))
        continueEvent = Event("continue", self.getInPortName("input"))
        
        # debug transitions
        self.pauseTransitions = {}
        self.timedTransitions = {}
        self.eventTransitions = {}
        self.createdTransitions = {}
        self.stopTransitions = {}
        self.timeBreakpointTransitions = {}
        self.genBreakpointTransitions = {}
        
        # add children
        self.states[""].addChild(self.states["/running"])
        self.states[""].addChild(self.states["/interrupted"])
        self.states["/running"].addChild(self.states["/running/print_simulated_time"])
        self.states["/running"].addChild(self.states["/running/print_wct_time"])
        self.states["/running/print_simulated_time"].addChild(self.states["/running/print_simulated_time/print_simulated_time"])
        self.states["/running/print_wct_time"].addChild(self.states["/running/print_wct_time/print_wct_time"])
        self.states[""].addChild(self.states["/state_Debug"])
        self.states[""].addChild(self.states["/state_Final"])
        self.states[""].fixTree()
        self.states[""].default_state = self.states["/running"]
        self.states["/running/print_simulated_time"].default_state = self.states["/running/print_simulated_time/print_simulated_time"]
        self.states["/running/print_wct_time"].default_state = self.states["/running/print_wct_time/print_wct_time"]
        
        # transition /running/print_simulated_time/print_simulated_time
        self.eventTransitions["/running/print_simulated_time/print_simulated_time"] = []
        self.timedTransitions["/running/print_simulated_time/print_simulated_time"] = []
        self.createdTransitions["/running/print_simulated_time/print_simulated_time"] = []
        self.timeBreakpointTransitions["/running/print_simulated_time/print_simulated_time"] = []
        self.genBreakpointTransitions["/running/print_simulated_time/print_simulated_time"] = []
        _running_print_simulated_time_print_simulated_time_0 = Transition(self, self.states["/running/print_simulated_time/print_simulated_time"], [self.states["/running/print_simulated_time/print_simulated_time"]])
        _running_print_simulated_time_print_simulated_time_0.setAction(self._running_print_simulated_time_print_simulated_time_0_exec)
        _running_print_simulated_time_print_simulated_time_0.setTrigger(Event("_0after"))
        self.states["/running/print_simulated_time/print_simulated_time"].addTransition(_running_print_simulated_time_print_simulated_time_0)
        self.timedTransitions["/running/print_simulated_time/print_simulated_time"].append(_running_print_simulated_time_print_simulated_time_0)
        
        # transition /running/print_wct_time/print_wct_time
        self.eventTransitions["/running/print_wct_time/print_wct_time"] = []
        self.timedTransitions["/running/print_wct_time/print_wct_time"] = []
        self.createdTransitions["/running/print_wct_time/print_wct_time"] = []
        self.timeBreakpointTransitions["/running/print_wct_time/print_wct_time"] = []
        self.genBreakpointTransitions["/running/print_wct_time/print_wct_time"] = []
        _running_print_wct_time_print_wct_time_0 = Transition(self, self.states["/running/print_wct_time/print_wct_time"], [self.states["/running/print_wct_time/print_wct_time"]])
        _running_print_wct_time_print_wct_time_0.setAction(self._running_print_wct_time_print_wct_time_0_exec)
        _running_print_wct_time_print_wct_time_0.setTrigger(Event("_1after"))
        self.states["/running/print_wct_time/print_wct_time"].addTransition(_running_print_wct_time_print_wct_time_0)
        self.timedTransitions["/running/print_wct_time/print_wct_time"].append(_running_print_wct_time_print_wct_time_0)
        
        # transition /interrupted
        self.eventTransitions["/interrupted"] = []
        self.timedTransitions["/interrupted"] = []
        self.createdTransitions["/interrupted"] = []
        self.timeBreakpointTransitions["/interrupted"] = []
        self.genBreakpointTransitions["/interrupted"] = []
        _interrupted_0 = Transition(self, self.states["/interrupted"], [self.states["/interrupted"]])
        _interrupted_0.setAction(self._interrupted_0_exec)
        _interrupted_0.setTrigger(Event("interrupt", self.getInPortName("input")))
        self.states["/interrupted"].addTransition(_interrupted_0)
        self.eventTransitions["/interrupted"].append(_interrupted_0)
        _interrupted_1 = Transition(self, self.states["/interrupted"], [self.states["/running"]])
        _interrupted_1.setAction(self._interrupted_1_exec)
        _interrupted_1.setTrigger(Event("continue", self.getInPortName("input")))
        self.states["/interrupted"].addTransition(_interrupted_1)
        self.eventTransitions["/interrupted"].append(_interrupted_1)
        
        # transition /running
        self.eventTransitions["/running"] = []
        self.timedTransitions["/running"] = []
        self.createdTransitions["/running"] = []
        self.timeBreakpointTransitions["/running"] = []
        self.genBreakpointTransitions["/running"] = []
        _running_0 = Transition(self, self.states["/running"], [self.states["/interrupted"]])
        _running_0.setAction(self._running_0_exec)
        _running_0.setTrigger(Event("interrupt", self.getInPortName("input")))
        self.states["/running"].addTransition(_running_0)
        self.eventTransitions["/running"].append(_running_0)
        
        # transition /running/print_simulated_time
        self.eventTransitions["/running/print_simulated_time"] = []
        self.timedTransitions["/running/print_simulated_time"] = []
        self.createdTransitions["/running/print_simulated_time"] = []
        self.timeBreakpointTransitions["/running/print_simulated_time"] = []
        self.genBreakpointTransitions["/running/print_simulated_time"] = []
        _running_print_simulated_time_0 = Transition(self, self.states["/running/print_simulated_time"], [self.states["/running/print_simulated_time"]])
        _running_print_simulated_time_0.setAction(self._running_print_simulated_time_0_exec)
        _running_print_simulated_time_0.setTrigger(Event("interrupt", self.getInPortName("input")))
        self.states["/running/print_simulated_time"].addTransition(_running_print_simulated_time_0)
        self.eventTransitions["/running/print_simulated_time"].append(_running_print_simulated_time_0)
        
        # transition /running/print_wct_time
        self.eventTransitions["/running/print_wct_time"] = []
        self.timedTransitions["/running/print_wct_time"] = []
        self.createdTransitions["/running/print_wct_time"] = []
        self.timeBreakpointTransitions["/running/print_wct_time"] = []
        self.genBreakpointTransitions["/running/print_wct_time"] = []
        
        # transitions /state_Debug
        # _running to /state_Debug
        _running_to_state_Debug = Transition(self, self.states["/running"], [self.states["/state_Debug"]])
        _running_to_state_Debug.setTrigger(pauseEvent)
        self.states["/running"].addTransition(_running_to_state_Debug)
        self.pauseTransitions["/running"] = _running_to_state_Debug
        
        # running from /state_Debug
        _state_Debug_to_running = Transition(self, self.states["/state_Debug"], [self.states["/running"]])
        _state_Debug_to_running.setTrigger(continueEvent)
        _state_Debug_to_running.setGuard(self.continueGuard_running)
        self.states["/state_Debug"].addTransition(_state_Debug_to_running)
        
        # _running to /state_Final
        _running_to_state_Final = Transition(self, self.states["/running"], [self.states["/state_Final"]])
        _running_to_state_Final.setTrigger(stopEvent)
        self.states["/running"].addTransition(_running_to_state_Final)
        self.stopTransitions["/running"] = _running_to_state_Final
        
        # _running_print_simulated_time to /state_Debug
        _running_print_simulated_time_to_state_Debug = Transition(self, self.states["/running/print_simulated_time"], [self.states["/state_Debug"]])
        _running_print_simulated_time_to_state_Debug.setTrigger(pauseEvent)
        self.states["/running/print_simulated_time"].addTransition(_running_print_simulated_time_to_state_Debug)
        self.pauseTransitions["/running/print_simulated_time"] = _running_print_simulated_time_to_state_Debug
        
        # running_print_simulated_time from /state_Debug
        _state_Debug_to_running_print_simulated_time = Transition(self, self.states["/state_Debug"], [self.states["/running/print_simulated_time"]])
        _state_Debug_to_running_print_simulated_time.setTrigger(continueEvent)
        _state_Debug_to_running_print_simulated_time.setGuard(self.continueGuard_running_print_simulated_time)
        self.states["/state_Debug"].addTransition(_state_Debug_to_running_print_simulated_time)
        
        # _running_print_simulated_time to /state_Final
        _running_print_simulated_time_to_state_Final = Transition(self, self.states["/running/print_simulated_time"], [self.states["/state_Final"]])
        _running_print_simulated_time_to_state_Final.setTrigger(stopEvent)
        self.states["/running/print_simulated_time"].addTransition(_running_print_simulated_time_to_state_Final)
        self.stopTransitions["/running/print_simulated_time"] = _running_print_simulated_time_to_state_Final
        
        # _running_print_simulated_time_print_simulated_time to /state_Debug
        _running_print_simulated_time_print_simulated_time_to_state_Debug = Transition(self, self.states["/running/print_simulated_time/print_simulated_time"], [self.states["/state_Debug"]])
        _running_print_simulated_time_print_simulated_time_to_state_Debug.setTrigger(pauseEvent)
        self.states["/running/print_simulated_time/print_simulated_time"].addTransition(_running_print_simulated_time_print_simulated_time_to_state_Debug)
        self.pauseTransitions["/running/print_simulated_time/print_simulated_time"] = _running_print_simulated_time_print_simulated_time_to_state_Debug
        
        # running_print_simulated_time_print_simulated_time from /state_Debug
        _state_Debug_to_running_print_simulated_time_print_simulated_time = Transition(self, self.states["/state_Debug"], [self.states["/running/print_simulated_time/print_simulated_time"]])
        _state_Debug_to_running_print_simulated_time_print_simulated_time.setTrigger(continueEvent)
        _state_Debug_to_running_print_simulated_time_print_simulated_time.setGuard(self.continueGuard_running_print_simulated_time_print_simulated_time)
        self.states["/state_Debug"].addTransition(_state_Debug_to_running_print_simulated_time_print_simulated_time)
        
        # _running_print_simulated_time_print_simulated_time to /state_Final
        _running_print_simulated_time_print_simulated_time_to_state_Final = Transition(self, self.states["/running/print_simulated_time/print_simulated_time"], [self.states["/state_Final"]])
        _running_print_simulated_time_print_simulated_time_to_state_Final.setTrigger(stopEvent)
        self.states["/running/print_simulated_time/print_simulated_time"].addTransition(_running_print_simulated_time_print_simulated_time_to_state_Final)
        self.stopTransitions["/running/print_simulated_time/print_simulated_time"] = _running_print_simulated_time_print_simulated_time_to_state_Final
        
        # _running_print_wct_time to /state_Debug
        _running_print_wct_time_to_state_Debug = Transition(self, self.states["/running/print_wct_time"], [self.states["/state_Debug"]])
        _running_print_wct_time_to_state_Debug.setTrigger(pauseEvent)
        self.states["/running/print_wct_time"].addTransition(_running_print_wct_time_to_state_Debug)
        self.pauseTransitions["/running/print_wct_time"] = _running_print_wct_time_to_state_Debug
        
        # running_print_wct_time from /state_Debug
        _state_Debug_to_running_print_wct_time = Transition(self, self.states["/state_Debug"], [self.states["/running/print_wct_time"]])
        _state_Debug_to_running_print_wct_time.setTrigger(continueEvent)
        _state_Debug_to_running_print_wct_time.setGuard(self.continueGuard_running_print_wct_time)
        self.states["/state_Debug"].addTransition(_state_Debug_to_running_print_wct_time)
        
        # _running_print_wct_time to /state_Final
        _running_print_wct_time_to_state_Final = Transition(self, self.states["/running/print_wct_time"], [self.states["/state_Final"]])
        _running_print_wct_time_to_state_Final.setTrigger(stopEvent)
        self.states["/running/print_wct_time"].addTransition(_running_print_wct_time_to_state_Final)
        self.stopTransitions["/running/print_wct_time"] = _running_print_wct_time_to_state_Final
        
        # _running_print_wct_time_print_wct_time to /state_Debug
        _running_print_wct_time_print_wct_time_to_state_Debug = Transition(self, self.states["/running/print_wct_time/print_wct_time"], [self.states["/state_Debug"]])
        _running_print_wct_time_print_wct_time_to_state_Debug.setTrigger(pauseEvent)
        self.states["/running/print_wct_time/print_wct_time"].addTransition(_running_print_wct_time_print_wct_time_to_state_Debug)
        self.pauseTransitions["/running/print_wct_time/print_wct_time"] = _running_print_wct_time_print_wct_time_to_state_Debug
        
        # running_print_wct_time_print_wct_time from /state_Debug
        _state_Debug_to_running_print_wct_time_print_wct_time = Transition(self, self.states["/state_Debug"], [self.states["/running/print_wct_time/print_wct_time"]])
        _state_Debug_to_running_print_wct_time_print_wct_time.setTrigger(continueEvent)
        _state_Debug_to_running_print_wct_time_print_wct_time.setGuard(self.continueGuard_running_print_wct_time_print_wct_time)
        self.states["/state_Debug"].addTransition(_state_Debug_to_running_print_wct_time_print_wct_time)
        
        # _running_print_wct_time_print_wct_time to /state_Final
        _running_print_wct_time_print_wct_time_to_state_Final = Transition(self, self.states["/running/print_wct_time/print_wct_time"], [self.states["/state_Final"]])
        _running_print_wct_time_print_wct_time_to_state_Final.setTrigger(stopEvent)
        self.states["/running/print_wct_time/print_wct_time"].addTransition(_running_print_wct_time_print_wct_time_to_state_Final)
        self.stopTransitions["/running/print_wct_time/print_wct_time"] = _running_print_wct_time_print_wct_time_to_state_Final
        
        # _interrupted to /state_Debug
        _interrupted_to_state_Debug = Transition(self, self.states["/interrupted"], [self.states["/state_Debug"]])
        _interrupted_to_state_Debug.setTrigger(pauseEvent)
        self.states["/interrupted"].addTransition(_interrupted_to_state_Debug)
        self.pauseTransitions["/interrupted"] = _interrupted_to_state_Debug
        
        # interrupted from /state_Debug
        _state_Debug_to_interrupted = Transition(self, self.states["/state_Debug"], [self.states["/interrupted"]])
        _state_Debug_to_interrupted.setTrigger(continueEvent)
        _state_Debug_to_interrupted.setGuard(self.continueGuard_interrupted)
        self.states["/state_Debug"].addTransition(_state_Debug_to_interrupted)
        
        # _interrupted to /state_Final
        _interrupted_to_state_Final = Transition(self, self.states["/interrupted"], [self.states["/state_Final"]])
        _interrupted_to_state_Final.setTrigger(stopEvent)
        self.states["/interrupted"].addTransition(_interrupted_to_state_Final)
        self.stopTransitions["/interrupted"] = _interrupted_to_state_Final
        
        # comb0
        _state_Debug_to_comb0 = Transition(self, self.states["/state_Debug"], [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_wct_time/print_wct_time"]])
        _state_Debug_to_comb0.setTrigger(continueEvent)
        _state_Debug_to_comb0.setGuard(self.continueGuardComb0)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb0)
        
        # comb1
        _state_Debug_to_comb1 = Transition(self, self.states["/state_Debug"], [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_simulated_time"]])
        _state_Debug_to_comb1.setTrigger(continueEvent)
        _state_Debug_to_comb1.setGuard(self.continueGuardComb1)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb1)
        
        # comb2
        _state_Debug_to_comb2 = Transition(self, self.states["/state_Debug"], [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_wct_time"]])
        _state_Debug_to_comb2.setTrigger(continueEvent)
        _state_Debug_to_comb2.setGuard(self.continueGuardComb2)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb2)
        
        # comb3
        _state_Debug_to_comb3 = Transition(self, self.states["/state_Debug"], [self.states["/running/print_wct_time/print_wct_time"], self.states["/running/print_simulated_time"]])
        _state_Debug_to_comb3.setTrigger(continueEvent)
        _state_Debug_to_comb3.setGuard(self.continueGuardComb3)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb3)
        
        # comb4
        _state_Debug_to_comb4 = Transition(self, self.states["/state_Debug"], [self.states["/running/print_wct_time/print_wct_time"], self.states["/running/print_wct_time"]])
        _state_Debug_to_comb4.setTrigger(continueEvent)
        _state_Debug_to_comb4.setGuard(self.continueGuardComb4)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb4)
        
        # comb5
        _state_Debug_to_comb5 = Transition(self, self.states["/state_Debug"], [self.states["/running/print_simulated_time"], self.states["/running/print_wct_time"]])
        _state_Debug_to_comb5.setTrigger(continueEvent)
        _state_Debug_to_comb5.setGuard(self.continueGuardComb5)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb5)
        
        # comb6
        _state_Debug_to_comb6 = Transition(self, self.states["/state_Debug"], [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_wct_time/print_wct_time"], self.states["/running/print_simulated_time"]])
        _state_Debug_to_comb6.setTrigger(continueEvent)
        _state_Debug_to_comb6.setGuard(self.continueGuardComb6)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb6)
        
        # comb7
        _state_Debug_to_comb7 = Transition(self, self.states["/state_Debug"], [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_wct_time/print_wct_time"], self.states["/running/print_wct_time"]])
        _state_Debug_to_comb7.setTrigger(continueEvent)
        _state_Debug_to_comb7.setGuard(self.continueGuardComb7)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb7)
        
        # comb8
        _state_Debug_to_comb8 = Transition(self, self.states["/state_Debug"], [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_simulated_time"], self.states["/running/print_wct_time"]])
        _state_Debug_to_comb8.setTrigger(continueEvent)
        _state_Debug_to_comb8.setGuard(self.continueGuardComb8)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb8)
        
        # comb9
        _state_Debug_to_comb9 = Transition(self, self.states["/state_Debug"], [self.states["/running/print_wct_time/print_wct_time"], self.states["/running/print_simulated_time"], self.states["/running/print_wct_time"]])
        _state_Debug_to_comb9.setTrigger(continueEvent)
        _state_Debug_to_comb9.setGuard(self.continueGuardComb9)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb9)
        
        # comb10
        _state_Debug_to_comb10 = Transition(self, self.states["/state_Debug"], [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_wct_time/print_wct_time"], self.states["/running/print_simulated_time"], self.states["/running/print_wct_time"]])
        _state_Debug_to_comb10.setTrigger(continueEvent)
        _state_Debug_to_comb10.setGuard(self.continueGuardComb10)
        self.states["/state_Debug"].addTransition(_state_Debug_to_comb10)
        
    
    def _running_enter(self):
        self.current_state = self.states["/running"]
        self.startTime = self.getSimulatedTime()
        
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            
            event = "entry: /running"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/running")
            
        else:
            event = "re-entry: /running"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _running_exit(self):
        index = 2
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        found = False
        for b in self.timeBreakpointTransitions["/running"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/running"]:
            if b.enabled_event != None:
                found = True
        
        if (self.pauseTransitions["/running"].enabled_event == None) and (not found):
            self.firstTime = True
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/running"])
        allTransitions.extend(self.eventTransitions["/running"])
        allTransitions.extend(self.timeBreakpointTransitions["/running"])
        allTransitions.extend(self.genBreakpointTransitions["/running"])
        allTransitions.extend(self.createdTransitions["/running"])
        allTransitions.append(self.stopTransitions["/running"])
        allTransitions.append(self.pauseTransitions["/running"])
        event = "exit: /running"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _running_print_simulated_time_enter(self):
        self.current_state = self.states["/running/print_simulated_time"]
        self.startTime = self.getSimulatedTime()
        
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            
            event = "entry: /running/print_simulated_time"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/running/print_simulated_time")
            
        else:
            event = "re-entry: /running/print_simulated_time"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _running_print_simulated_time_exit(self):
        index = 2
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        found = False
        for b in self.timeBreakpointTransitions["/running/print_simulated_time"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/running/print_simulated_time"]:
            if b.enabled_event != None:
                found = True
        
        if (self.pauseTransitions["/running/print_simulated_time"].enabled_event == None) and (not found):
            self.firstTime = True
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/running/print_simulated_time"])
        allTransitions.extend(self.eventTransitions["/running/print_simulated_time"])
        allTransitions.extend(self.timeBreakpointTransitions["/running/print_simulated_time"])
        allTransitions.extend(self.genBreakpointTransitions["/running/print_simulated_time"])
        allTransitions.extend(self.createdTransitions["/running/print_simulated_time"])
        allTransitions.append(self.stopTransitions["/running/print_simulated_time"])
        allTransitions.append(self.pauseTransitions["/running/print_simulated_time"])
        event = "exit: /running/print_simulated_time"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _running_print_wct_time_enter(self):
        self.current_state = self.states["/running/print_wct_time"]
        self.startTime = self.getSimulatedTime()
        
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            
            event = "entry: /running/print_wct_time"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
        else:
            event = "re-entry: /running/print_wct_time"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _running_print_wct_time_exit(self):
        index = 2
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        found = False
        for b in self.timeBreakpointTransitions["/running/print_wct_time"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/running/print_wct_time"]:
            if b.enabled_event != None:
                found = True
        
        if (self.pauseTransitions["/running/print_wct_time"].enabled_event == None) and (not found):
            self.firstTime = True
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/running/print_wct_time"])
        allTransitions.extend(self.eventTransitions["/running/print_wct_time"])
        allTransitions.extend(self.timeBreakpointTransitions["/running/print_wct_time"])
        allTransitions.extend(self.genBreakpointTransitions["/running/print_wct_time"])
        allTransitions.extend(self.createdTransitions["/running/print_wct_time"])
        allTransitions.append(self.stopTransitions["/running/print_wct_time"])
        allTransitions.append(self.pauseTransitions["/running/print_wct_time"])
        event = "exit: /running/print_wct_time"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _running_print_simulated_time_print_simulated_time_enter(self):
        self.current_state = self.states["/running/print_simulated_time/print_simulated_time"]
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            
            self.print_internal_state("/running/print_simulated_time/print_simulated_time")
            event = "entry: /running/print_simulated_time/print_simulated_time"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
            timers = []
            if self.scaleFactor != float("inf"):
                self.addTimer(0, 2 / self.scaleFactor)
                timers.append(2)
                print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
                self.process_time_transitions(timers, "/running/print_simulated_time/print_simulated_time")
            else:
                self.addTimer(0, 2.0 / self.scaleFactor)
            self.process_event_transitions("/running/print_simulated_time/print_simulated_time")
            
            print(colors.fg.lightgrey +"[/running/print_simulated_time/print_simulated_time] > "+colors.reset),
        else:
            self.addTimer(0, 2.0 - ((self.localExecutionTime / 1000.0) / self.scaleFactor))
            event = "re-entry: /running/print_simulated_time/print_simulated_time"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print(colors.fg.lightgrey +"[/running/print_simulated_time/print_simulated_time] > "+colors.reset),
    
    def _running_print_simulated_time_print_simulated_time_exit(self):
        self.removeTimer(0)
        index = 2
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/running/print_simulated_time/print_simulated_time"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/running/print_simulated_time/print_simulated_time"]:
            if b.enabled_event != None:
                found = True
        
        if (self.pauseTransitions["/running/print_simulated_time/print_simulated_time"].enabled_event == None) and (not found):
            self.firstTime = True
            self.active_states.get()
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/running/print_simulated_time/print_simulated_time"])
        allTransitions.extend(self.eventTransitions["/running/print_simulated_time/print_simulated_time"])
        allTransitions.extend(self.timeBreakpointTransitions["/running/print_simulated_time/print_simulated_time"])
        allTransitions.extend(self.genBreakpointTransitions["/running/print_simulated_time/print_simulated_time"])
        allTransitions.extend(self.createdTransitions["/running/print_simulated_time/print_simulated_time"])
        allTransitions.append(self.stopTransitions["/running/print_simulated_time/print_simulated_time"])
        allTransitions.append(self.pauseTransitions["/running/print_simulated_time/print_simulated_time"])
        event = "exit: /running/print_simulated_time/print_simulated_time"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _running_print_wct_time_print_wct_time_enter(self):
        self.current_state = self.states["/running/print_wct_time/print_wct_time"]
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            
            self.print_internal_state("/running/print_wct_time/print_wct_time")
            event = "entry: /running/print_wct_time/print_wct_time"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            
            timers = []
            if self.scaleFactor != float("inf"):
                self.addTimer(1, 2 / self.scaleFactor)
                timers.append(2)
                print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
                self.process_time_transitions(timers, "/running/print_wct_time/print_wct_time")
            else:
                self.addTimer(1, 2.0 / self.scaleFactor)
            self.process_event_transitions("/running/print_wct_time/print_wct_time")
            
            print(colors.fg.lightgrey +"[/running/print_wct_time/print_wct_time] > "+colors.reset),
        else:
            self.addTimer(1, 2.0 - ((self.localExecutionTime / 1000.0) / self.scaleFactor))
            event = "re-entry: /running/print_wct_time/print_wct_time"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print(colors.fg.lightgrey +"[/running/print_wct_time/print_wct_time] > "+colors.reset),
    
    def _running_print_wct_time_print_wct_time_exit(self):
        self.removeTimer(1)
        index = 2
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/running/print_wct_time/print_wct_time"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/running/print_wct_time/print_wct_time"]:
            if b.enabled_event != None:
                found = True
        
        if (self.pauseTransitions["/running/print_wct_time/print_wct_time"].enabled_event == None) and (not found):
            self.firstTime = True
            self.active_states.get()
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/running/print_wct_time/print_wct_time"])
        allTransitions.extend(self.eventTransitions["/running/print_wct_time/print_wct_time"])
        allTransitions.extend(self.timeBreakpointTransitions["/running/print_wct_time/print_wct_time"])
        allTransitions.extend(self.genBreakpointTransitions["/running/print_wct_time/print_wct_time"])
        allTransitions.extend(self.createdTransitions["/running/print_wct_time/print_wct_time"])
        allTransitions.append(self.stopTransitions["/running/print_wct_time/print_wct_time"])
        allTransitions.append(self.pauseTransitions["/running/print_wct_time/print_wct_time"])
        event = "exit: /running/print_wct_time/print_wct_time"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _interrupted_enter(self):
        self.current_state = self.states["/interrupted"]
        self.startTime = self.getSimulatedTime()
        
        while (not self.didCalcs.empty()):
            self.didCalcs.get()
        
        if self.firstTime == True:
            self.localExecutionTime = 0.0
            self.active_states.put(self.current_state)
            
            
            self.print_internal_state("/interrupted")
            event = "entry: /interrupted"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print((colors.fg.lightgreen + "Available Transition Options:") + colors.reset)
            self.process_event_transitions("/interrupted")
            
            print(colors.fg.lightgrey +"[/interrupted] > "+colors.reset),
        else:
            event = "re-entry: /interrupted"
            allAttTuples = []
            self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
            print(colors.fg.lightgrey +"[/interrupted] > "+colors.reset),
    
    def _interrupted_exit(self):
        index = 2
        for et in self.expiredTimestamps:
            self.removeTimer(index)
            index = (index + 1)
        
        if self.didCalcs.empty():
            self.localExecutionTime = (self.localExecutionTime + (self.getSimulatedTime() - self.startTime))
            self.executionTime = (self.executionTime + (self.getSimulatedTime() - self.startTime))
            self.didCalcs.put(True)
        
        found = False
        for b in self.timeBreakpointTransitions["/interrupted"]:
            if b.enabled_event != None:
                found = True
                timerIndex = int(b.enabled_event.name[1:2])
                startingIndex = 2
                self.expiredTimestamps[timerIndex - startingIndex] = True
        
        for b in self.genBreakpointTransitions["/interrupted"]:
            if b.enabled_event != None:
                found = True
        
        if (self.pauseTransitions["/interrupted"].enabled_event == None) and (not found):
            self.firstTime = True
            self.active_states.get()
        
        allTransitions = []
        allTransitions.extend(self.timedTransitions["/interrupted"])
        allTransitions.extend(self.eventTransitions["/interrupted"])
        allTransitions.extend(self.timeBreakpointTransitions["/interrupted"])
        allTransitions.extend(self.genBreakpointTransitions["/interrupted"])
        allTransitions.extend(self.createdTransitions["/interrupted"])
        allTransitions.append(self.stopTransitions["/interrupted"])
        allTransitions.append(self.pauseTransitions["/interrupted"])
        event = "exit: /interrupted"
        for tr in allTransitions:
            if not (tr.enabled_event == None):
                event = (event + (" - " + tr.enabled_event.name))
        allAttTuples = []
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
    
    def _state_Debug_enter(self):
        if self.firstTime:
            self.firstTime = False
        targets = list(self.active_states.queue)
        states_names = [s.name for s in targets]
        
        print(colors.fg.lightred),
        print("DEBUG MODE")
        print("Current States: {}".format(states_names))
        print(colors.reset),
        print(colors.fg.lightgrey +"[/state_Debug] > "+colors.reset),
    
    def _state_Debug_exit(self):
        self.cumulativeDebugTime = (self.getSimulatedTime() - self.executionTime)
        targets = list(self.active_states.queue)
        for t in targets:
            self.pauseTransitions[t.name].enabled_event = None
    
    def _state_Final_enter(self):
        outputName = "executionTrace.txt"
        self.controller.stop()
        self.saveExecutionTrace(outputName)
        exit(1)
    
    def process_time_transitions(self, timers, state_name):
        iteration = 0
        chosen = None
        lowest = timers[0]
        for t in self.timedTransitions[state_name]:
            if lowest >= timers[iteration]:
                lowest = timers[iteration]
                chosen = t
            iteration = iteration + 1
        if iteration > 0:
            temp = Transition(self, chosen.source, chosen.targets)
            temp.setTrigger(Event("step", self.getInPortName("input")))
            if not self.listContains(self.createdTransitions[state_name], temp):
                self.createdTransitions[state_name].append(temp)
                chosen.source.addTransition(temp)
            attrs = [s.name for s in chosen.targets]
            print((colors.fg.lightgreen + "[time-based]" + colors.fg.lightgrey +" type " + colors.fg.pink +"step" + colors.fg.lightgrey + " to skip the transition to "+ colors.fg.cyan +"{}" + colors.fg.lightgrey +" which has a duration of " + colors.fg.pink + "{}" + colors.fg.lightgrey +" seconds" + colors.reset).format(attrs, lowest))
    
    def process_event_transitions(self, state_name):
        possibleT = self.eventTransitions[state_name]
        source = self.current_state
        i = 0
        for t in possibleT:
            temp = Transition(self, source, t.targets)
            name = ("step" + str(i))
            temp.setTrigger(Event(name, self.getInPortName("input")))
            if not self.listContains(self.createdTransitions[state_name], temp):
                self.createdTransitions[state_name].append(temp)
                source.addTransition(temp)
            attrs = [s.name for s in t.targets]
            print((colors.fg.lightgreen + "[event-based]"  + colors.fg.lightgrey +" type " + colors.fg.pink +"{}"+ colors.fg.lightgrey + " to move to "+ colors.fg.cyan + "{}" + colors.fg.lightgrey +" and simulate event "+ colors.fg.pink + "{}"+ colors.reset).format(name, attrs, t.trigger.name))
            i = (i + 1)
    
    def print_internal_state(self, state_name):
        print("\n" + (colors.fg.cyan + state_name))
    
    def saveExecutionTrace(self, outputName):
        currDir = os.getcwd()
        for entry in os.listdir(currDir):
            if os.path.isfile(os.path.join(currDir, entry)) and entry == outputName:
                outputName = outputName + "_1"
        
        simTime = "Total Simulation Time: " + str(float(self.getSimulatedTime())) + " ms (includes Debug Time)"
        exTime = "Execution Time: " + str(self.executionTime) + " ms"
        debugTime = "Total Debug Time: " + str(self.cumulativeDebugTime) + " ms"
        
        f = FileWriter(outputName)
        f.write("Execution Info")
        f.write("")
        f.write(simTime)
        f.write(exTime)
        f.write(debugTime)
        f.write("")
        f.write("Events")
        for ide, event in enumerate(self.tracedEvents):
            eventName = event.getEventName()
            timestamp = event.getTimestamp()
            attributeValues = ""
            for v in event.getAttributeValues():
                attributeValues += v[0] + ": " + str(v[1]) + "; "
            eventInfo = str(ide) + ". Timestamp: " + str(timestamp) +  "; Name: " + eventName + ";  Attributes: ["  + attributeValues + "]"
            # print(ide)
            # print(eventName)
            f.write(eventInfo)
        f.close() 
    
    def saveEvent(self, event_name, timestamp, attribute_values):
        self.tracedEvents.append(TracedEvent(event_name, timestamp, attribute_values))
    
    def listContains(self, transitions, newTransition):
        flag = False
        for t in transitions:
            if ((((t.source == newTransition.source) and (t.targets == newTransition.targets)) and (t.trigger.name == newTransition.trigger.name)) and (t.trigger.port == newTransition.trigger.port)) and (t.action == newTransition.action):
                flag = True
        return flag
    
    def _running_0_exec(self, parameters):
        self.print_simulated_time()
        self.print_wct_time()
    
    def _running_print_simulated_time_0_exec(self, parameters):
        print 'going nowhere'
    
    def _running_print_simulated_time_print_simulated_time_0_exec(self, parameters):
        self.print_simulated_time()
    
    def _running_print_wct_time_print_wct_time_0_exec(self, parameters):
        self.print_wct_time()
    
    def _interrupted_0_exec(self, parameters):
        self.print_simulated_time()
        self.print_wct_time()
    
    def _interrupted_1_exec(self, parameters):
        self.print_simulated_time()
        self.print_wct_time()
    
    def continueGuard_running(self, parameters):
        return list(self.active_states.queue) == self.states["/running"]
    
    def continueGuard_running_print_simulated_time(self, parameters):
        return list(self.active_states.queue) == self.states["/running/print_simulated_time"]
    
    def continueGuard_running_print_simulated_time_print_simulated_time(self, parameters):
        return list(self.active_states.queue) == self.states["/running/print_simulated_time/print_simulated_time"]
    
    def continueGuard_running_print_wct_time(self, parameters):
        return list(self.active_states.queue) == self.states["/running/print_wct_time"]
    
    def continueGuard_running_print_wct_time_print_wct_time(self, parameters):
        return list(self.active_states.queue) == self.states["/running/print_wct_time/print_wct_time"]
    
    def continueGuard_interrupted(self, parameters):
        return list(self.active_states.queue) == self.states["/interrupted"]
    
    def continueGuardComb0(self, parameters):
        return list(self.active_states.queue) == [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_wct_time/print_wct_time"]]
    
    def continueGuardComb1(self, parameters):
        return list(self.active_states.queue) == [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_simulated_time"]]
    
    def continueGuardComb2(self, parameters):
        return list(self.active_states.queue) == [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_wct_time"]]
    
    def continueGuardComb3(self, parameters):
        return list(self.active_states.queue) == [self.states["/running/print_wct_time/print_wct_time"], self.states["/running/print_simulated_time"]]
    
    def continueGuardComb4(self, parameters):
        return list(self.active_states.queue) == [self.states["/running/print_wct_time/print_wct_time"], self.states["/running/print_wct_time"]]
    
    def continueGuardComb5(self, parameters):
        return list(self.active_states.queue) == [self.states["/running/print_simulated_time"], self.states["/running/print_wct_time"]]
    
    def continueGuardComb6(self, parameters):
        return list(self.active_states.queue) == [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_wct_time/print_wct_time"], self.states["/running/print_simulated_time"]]
    
    def continueGuardComb7(self, parameters):
        return list(self.active_states.queue) == [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_wct_time/print_wct_time"], self.states["/running/print_wct_time"]]
    
    def continueGuardComb8(self, parameters):
        return list(self.active_states.queue) == [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_simulated_time"], self.states["/running/print_wct_time"]]
    
    def continueGuardComb9(self, parameters):
        return list(self.active_states.queue) == [self.states["/running/print_wct_time/print_wct_time"], self.states["/running/print_simulated_time"], self.states["/running/print_wct_time"]]
    
    def continueGuardComb10(self, parameters):
        return list(self.active_states.queue) == [self.states["/running/print_simulated_time/print_simulated_time"], self.states["/running/print_wct_time/print_wct_time"], self.states["/running/print_simulated_time"], self.states["/running/print_wct_time"]]
    
    def initializeStatechart(self):
        # enter default state
        event = "start"
        allAttTuples = []
        self.saveEvent(event, self.getSimulatedTime(), allAttTuples)
        self.default_targets = self.states["/running"].getEffectiveTargetStates()
        RuntimeClassBase.initializeStatechart(self)

class ObjectManager(ObjectManagerBase):
    def __init__(self, controller):
        ObjectManagerBase.__init__(self, controller)
    
    def instantiate(self, class_name, construct_params):
        if class_name == "MainApp":
            instance = MainApp(self.controller)
            instance.associations = {}
        else:
            raise Exception("Cannot instantiate class " + class_name)
        return instance

class Controller(ThreadsControllerBase):
    def __init__(self, keep_running = None, behind_schedule_callback = None):
        if keep_running == None: keep_running = True
        if behind_schedule_callback == None: behind_schedule_callback = None
        ThreadsControllerBase.__init__(self, ObjectManager(self), keep_running, behind_schedule_callback)
        self.addInputPort("input")
        self.object_manager.createInstance("MainApp", [])